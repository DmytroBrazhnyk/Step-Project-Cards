const visitContainer=document.querySelector(".visits-list"),loginButton=document.getElementById("header-userActions-loginButton");loginButton.addEventListener("click",()=>new Login);let userToken="";const createCardButton=document.getElementById("header-userActions-createCard");createCardButton.addEventListener("click",()=>{new CreateVisitModal});class CreateVisitModal{constructor(){createCardButton.classList.toggle("hidden"),this.modal=document.createElement("div"),this.modal.classList.add("creadeVisitModal"),this.modal.innerHTML='\n        <div class="modal-content">\n            <label for="doctorSelect">Оберіть лікаря:</label>\n            <select id="doctorSelect">\n                <option value="" disabled selected hidden>Оберіть лікаря</option>\n                <option value="cardiologist">Кардіолог</option>\n                <option value="dentist">Стоматолог</option>\n                <option value="therapist">Терапевт</option>\n            </select>\n            <div id="fieldsContainer"></div>\n        </div>\n        ',document.body.appendChild(this.modal),this.selectElement=document.getElementById("doctorSelect"),this.fieldsContainer=document.getElementById("fieldsContainer"),this.selectElement.addEventListener("change",this.handleDoctorChange.bind(this))}handleDoctorChange(){const t=this.selectElement.value;this.updateAdditionalFields(t)}updateAdditionalFields(t){this.fieldsContainer.innerHTML="",this.createInputField("purpose","Мета візиту"),this.createInputField("description","Короткий опис візиту"),this.createSelectField("urgency","Терміновість",["Звичайна","Пріоритетна","Невідкладна"],"оберіть терміновість"),this.createInputField("fullName","ПІБ"),"cardiologist"===t?(this.createInputField("pressure","Звичайний тиск:"),this.createInputField("bmi","Індекс маси тіла:"),this.createInputField("cardiovascularDiseases","Перенесені захворювання серцево-судинної системи:"),this.createInputField("age","Вік:")):"dentist"===t?this.createInputField("lastVisitDate","Дата останнього відвідування:"):"therapist"===t&&this.createInputField("age","Вік:");const e=document.createElement("button");e.innerText="Створити",e.addEventListener("click",()=>this.createVisit()),this.fieldsContainer.appendChild(e);const n=document.createElement("button");n.innerText="Закрити",n.addEventListener("click",()=>this.closeVisitModal()),this.fieldsContainer.appendChild(n)}closeVisitModal(){this.modal.remove(),createCardButton.classList.toggle("hidden")}createVisit(){const t=this.fieldsContainer.querySelectorAll(".modalInput"),e={};e.selectedDoctor=e.selectedDoctor=this.selectElement.options[this.selectElement.selectedIndex].text,t.forEach(t=>{const n=t.id,i="select-one"===t.type?t.options[t.selectedIndex].value:t.value;e[n]=i}),this.visit=e,console.log(this.visit),this.closeVisitModal(),this.pushToServer(this.visit)}pushToServer(t){fetch("https://ajax.test-danit.com/api/v2/cards",{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer "+userToken},body:JSON.stringify(t)}).then(t=>{if(!t.ok)throw new Error("HTTP error! Status: "+t.status);return t.json()}).then(t=>{console.log(t);new Card(t).addToVisitsList()}).catch(t=>console.error("Помилка:",t))}createInputField(t,e){const n=document.createElement("div");n.innerHTML=`\n            <label for="${t}">${e}</label>\n            <input type="text" id="${t}" name="${t}" class="modalInput">\n        `,this.fieldsContainer.appendChild(n)}createSelectField(t,e,n){const i=document.createElement("div"),s=n.map(t=>`<option value="${t}">${t}</option>`).join("");i.innerHTML=`\n            <label for="${t}">${e}</label>\n            <select id="${t}" name="${t}" class="modalInput">\n                <option value="" disabled selected hidden>Оберіть ${e.toLowerCase()}</option>\n                ${s}\n            </select>\n        `,this.fieldsContainer.appendChild(i)}}class Card{constructor(t){this.data=t,this.card=this.createCard(),this.visitsListSection=document.querySelector(".visits-list"),this.additionalInfoContainer=this.card.querySelector(".additionalInfoContainer"),this.btnContainer=this.card.querySelector(".buttonsContainer"),this.modal}createCard(){const t=document.createElement("div");return t.classList.add("visitCard"),t.innerHTML=`\n            <div class="visibleInfo">\n                <p>ПІБ: ${this.data.fullName}</p>\n                <p>Лікар: ${this.data.selectedDoctor}</p>\n            </div>\n            <div class="additionalInfoContainer">\n                ${this.renderAdditionalInfo()}\n            </div>\n            <div class="buttonsContainer">\n                <button class="showMoreBtn">Показати більше</button>\n                <button class="editBtn">Редагувати</button>\n                <button class="deleteIcon">❌</button>\n            </div>\n        `,t.addEventListener("click",this.handleButtonClick.bind(this)),t}renderAdditionalInfo(){let t="";for(const e in this.data)if("selectedDoctor"!==e&&"fullName"!==e){t+=`<p>${translations[e]||e}: ${this.data[e]}</p>`}return t}handleButtonClick(t){const e=t.target;e.classList.contains("editBtn")?this.redactCard():e.classList.contains("deleteIcon")?this.deleteCard():e.classList.contains("showMoreBtn")&&this.showCard()}deleteCard(){this.card.remove()}showCard(){const t=this.card.querySelector(".showMoreBtn");this.additionalInfoContainer.classList.toggle("active"),t.innerText=this.additionalInfoContainer.classList.contains("active")?"Згорнути":"Показати більше"}redactCard(){this.additionalInfoContainer.classList.add("hidden"),this.btnContainer.classList.add("hidden"),this.modal=document.createElement("div"),this.modal.classList.add("modal"),this.modal.innerHTML=`\n            <div class="modal-content">\n                <h2>Редагування даних</h2>\n                ${this.renderEditFields()}\n                <button class="saveBtn">Зберегти</button>\n            </div>\n        `,this.card.append(this.modal);this.modal.querySelector(".saveBtn").addEventListener("click",()=>this.saveChanges())}renderEditFields(){let t="";for(const e in this.data)if("selectedDoctor"!==e&&"fullName"!==e){const n=translations[e]||e;t+="urgency"===e?`\n                        <div class="edit-field">\n                            <label for="${e}">${n}</label>\n                            <select id="${e}">\n                                <option value="Звичайна" ${"Звичайна"===this.data[e]?"selected":""}>Звичайна</option>\n                                <option value="Пріоритетна" ${"Пріоритетна"===this.data[e]?"selected":""}>Пріоритетна</option>\n                                <option value="Невідкладна" ${"Невідкладна"===this.data[e]?"selected":""}>Невідкладна</option>\n                            </select>\n                        </div>\n                    `:`\n                        <div class="edit-field">\n                            <label for="${e}">${n}</label>\n                            <input type="text" id="${e}" value="${this.data[e]}">\n                        </div>\n                    `}return t}saveChanges(){const t={};for(const e in this.data){const n=document.getElementById(e);n&&void 0!==n.value&&(t[e]=n.value)}for(const e in t)this.data.hasOwnProperty(e)&&(this.data[e]=t[e]);this.modal.remove(),console.log(this.data),this.updateAdditionalInfo(),this.additionalInfoContainer.classList.remove("hidden"),this.btnContainer.classList.remove("hidden")}updateAdditionalInfo(){const t=this.renderAdditionalInfo();this.additionalInfoContainer.innerHTML=t}addToVisitsList(){this.visitsListSection.appendChild(this.card)}}class Login{constructor(){this.modal=this.createLoginModal(),document.body.append(this.modal),this.loginButton=document.getElementById("header-userActions-loginButton"),this.loginButton.classList.add("hidden"),this.loginEventButton=this.modal.querySelector("#loginBtn"),this.errorElement=this.modal.querySelector("#error-message"),this.loginEventButton.addEventListener("click",()=>this.loginEvent())}createLoginModal(){const t=document.createElement("div");return t.classList.add("loginModal"),t.innerHTML='\n            <label for="email">Email:</label>\n            <input type="email" id="email" />\n            <br />\n            <label for="password">Пароль:</label>\n            <input type="password" id="password" />\n            <br />\n            <button id="loginBtn">Увійти</button>\n            <p id="error-message" class="error-message"></p> \x3c!-- Додали елемент для відображення повідомлення про помилку --\x3e\n        ',t}loginEvent(){const t=this.modal.querySelector("#email"),e=this.modal.querySelector("#password"),n=t.value,i=e.value;fetch("https://ajax.test-danit.com/api/v2/cards/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:n,password:i})}).then(t=>{if(!t.ok)throw new Error("Неправильні дані");return t.text()}).then(t=>{userToken=t,console.log(userToken),createCardButton.classList.add("active"),this.displayCards(),this.modal.remove()}).catch(t=>{console.error("Error:",t),this.clearFields(),this.showError("Неправильні дані")})}clearFields(){const t=this.modal.querySelector("#email"),e=this.modal.querySelector("#password");t.value="",e.value="",this.hideError()}showError(t){this.errorElement.textContent=t,this.errorElement.classList.add("visible")}hideError(){this.errorElement.textContent="",this.errorElement.classList.remove("visible")}displayCards(){fetch("https://ajax.test-danit.com/api/v2/cards",{method:"GET",headers:{Authorization:"Bearer "+userToken}}).then(t=>{if(!t.ok)throw new Error("HTTP error! Status: "+t.status);return t.json()}).then(t=>{t.forEach(t=>{new Card(t).addToVisitsList()})}).catch(t=>console.error("Помилка:",t))}}const translations={doctorName:"Лікар",purpose:"Мета візиту",description:"Короткий опис візиту",urgency:"Терміновість",fullName:"ПІБ",pressure:"Звичайний тиск",bmi:"Індекс маси тіла",cardiovascularDiseases:"Перенесені захворювання серцево-судинної системи",age:"Вік",lastVisitDate:"Дата останнього відвідування"};
//# sourceMappingURL=../sourcemaps/main.min.js.map
