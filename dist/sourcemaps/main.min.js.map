<<<<<<<<< Temporary merge branch 1
{"version":3,"sources":["01_main.js"],"names":["visitContainer","document","querySelector","CreateVisitModal","[object Object]","this","modal","createElement","classList","add","innerHTML","body","appendChild","selectElement","getElementById","fieldsContainer","addEventListener","handleDoctorChange","bind","selectedDoctor","value","updateAdditionalFields","createInputField","createSelectField","createBtn","innerText","createVisit","closeBtn","closeVisitModal","remove","inputs","querySelectorAll","visitData","options","selectedIndex","text","forEach","input","id","type","visit","console","log","Card","addToVisitsList","fieldName","label","inputField","selectField","selectOptions","map","option","join","toLowerCase","data","card","createCard","visitsListSection","additionalInfoContainer","btnContainer","cardElement","fullName","renderAdditionalInfo","handleButtonClick","additionalInfoHtml","key","translations","event","target","contains","redactCard","deleteCard","showCard","showMoreBtn","toggle","renderEditFields","append","saveChanges","editFieldsHtml","translatedKey","newData","undefined","hasOwnProperty","updateAdditionalInfo","newAdditionalInfoHtml","testObj","purpose","description","urgency","pressure","bmi","cardiovascularDiseases","age","lastVisitDate","doctorName","cardInstance","cardInstance2","cardInstance3"],"mappings":"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","file":"../js/main.min.js","sourcesContent":["const visitContainer = document.querySelector(\".visits-list\");\n\nclass CreateVisitModal {\n    constructor() {\n        this.modal = document.createElement('div');\n        this.modal.classList.add('creadeVisitModal');\n        this.modal.innerHTML = `\n        <div class=\"modal-content\">\n            <label for=\"doctorSelect\">Оберіть лікаря:</label>\n            <select id=\"doctorSelect\">\n                <option value=\"\" disabled selected hidden>Оберіть лікаря</option>\n                <option value=\"cardiologist\">Кардіолог</option>\n                <option value=\"dentist\">Стоматолог</option>\n                <option value=\"therapist\">Терапевт</option>\n            </select>\n            <div id=\"fieldsContainer\"></div>\n        </div>\n        `;\n\n        document.body.appendChild(this.modal);\n\n        this.selectElement = document.getElementById('doctorSelect');\n        this.fieldsContainer = document.getElementById('fieldsContainer');\n        this.selectElement.addEventListener('change', this.handleDoctorChange.bind(this));\n    }\n    handleDoctorChange() {\n        const selectedDoctor = this.selectElement.value;\n        this.updateAdditionalFields(selectedDoctor);\n    }\n    updateAdditionalFields(selectedDoctor) {\n\n        this.fieldsContainer.innerHTML = '';\n\n        this.createInputField(\"purpose\",\"Мета візиту\")\n        this.createInputField(\"description\",\"Короткий опис візиту\")\n        this.createSelectField(\"urgency\", \"Терміновість\", [\"Звичайна\", \"Пріоритетна\", \"Невідкладна\"],\"оберіть терміновість\");\n        this.createInputField(\"fullName\",\"ПІБ\")\n\n        if (selectedDoctor === 'cardiologist') {\n            this.createInputField('pressure', 'Звичайний тиск:');\n            this.createInputField('bmi', 'Індекс маси тіла:');\n            this.createInputField('cardiovascularDiseases', 'Перенесені захворювання серцево-судинної системи:');\n            this.createInputField('age', 'Вік:');\n        } else if (selectedDoctor === 'dentist') {\n            this.createInputField('lastVisitDate', 'Дата останнього відвідування:');\n        } else if (selectedDoctor === 'therapist') {\n            this.createInputField('age', 'Вік:');\n        }\n\n        const createBtn = document.createElement('button');\n        createBtn.innerText = 'Створити';\n        createBtn.addEventListener('click', () => this.createVisit());\n        this.fieldsContainer.appendChild(createBtn);\n\n        const closeBtn = document.createElement('button');\n        closeBtn.innerText = 'Закрити';\n        closeBtn.addEventListener('click', () => this.closeVisitModal());\n        this.fieldsContainer.appendChild(closeBtn);\n\n    }\n\n    closeVisitModal(){\n        this.modal.remove();\n    }\n    createVisit(){\n        const inputs = this.fieldsContainer.querySelectorAll('.modalInput');\n        const visitData = {};\n\n        visitData['selectedDoctor'] = visitData['selectedDoctor'] = this.selectElement.options[this.selectElement.selectedIndex].text;;\n\n        inputs.forEach(input => {\n            const id = input.id;\n            const value = input.type === 'select-one' ? input.options[input.selectedIndex].value : input.value;\n            visitData[id] = value;\n        });\n\n        this.visit = visitData;\n        \n        console.log(createVisit.visit);\n        this.closeVisitModal();\n        //виклик функції для створення картки та відправлення на сервер------\n        const card = new Card(createVisit.visit);\n        card.addToVisitsList();\n        //-------------------------------------------------------------------\n    }\n\n    createInputField(fieldName, label) {\n        const inputField = document.createElement('div');\n        inputField.innerHTML = `\n            <label for=\"${fieldName}\">${label}</label>\n            <input type=\"text\" id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\n        `;\n        this.fieldsContainer.appendChild(inputField);\n    }\n    createSelectField(fieldName, label, options) {\n        const selectField = document.createElement('div');\n        const selectOptions = options.map(option => `<option value=\"${option}\">${option}</option>`).join('');\n        selectField.innerHTML = `\n            <label for=\"${fieldName}\">${label}</label>\n            <select id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\n                <option value=\"\" disabled selected hidden>Оберіть ${label.toLowerCase()}</option>\n                ${selectOptions}\n            </select>\n        `;\n        this.fieldsContainer.appendChild(selectField);\n    }\n}\n\n//тестова строчка допоки не буде кнопки для створення візиту--------\nconst createVisit = new CreateVisitModal();\n//------------------------------------------------------------------\n//----------------------------------------------------------------------------------------\nclass Card {\n    constructor(visitData) {\n        this.data = visitData;\n        this.card = this.createCard();\n        this.visitsListSection = document.querySelector('.visits-list');\n        this.additionalInfoContainer = this.card.querySelector('.additionalInfoContainer');\n        this.btnContainer = this.card.querySelector(\".buttonsContainer\")\n        this.modal \n    }\n\n    createCard() {\n        const cardElement = document.createElement(\"div\");\n        cardElement.classList.add(\"visitCard\");\n        cardElement.innerHTML = `\n            <div class=\"visibleInfo\">\n                <p>ПІБ: ${this.data.fullName}</p>\n                <p>Лікар: ${this.data.selectedDoctor}</p>\n            </div>\n            <div class=\"additionalInfoContainer\">\n                ${this.renderAdditionalInfo()}\n            </div>\n            <div class=\"buttonsContainer\">\n                <button class=\"showMoreBtn\">Показати більше</button>\n                <button class=\"editBtn\">Редагувати</button>\n                <button class=\"deleteIcon\">❌</button>\n            </div>\n        `;\n        cardElement.addEventListener('click', this.handleButtonClick.bind(this));\n        return cardElement;\n    }\n\n    renderAdditionalInfo() {\n        let additionalInfoHtml = '';\n            for (const key in this.data) {\n                if (key !== 'selectedDoctor' && key !== 'fullName') {\n                    const translatedKey = translations[key] || key;\n                    additionalInfoHtml += `<p>${translatedKey}: ${this.data[key]}</p>`;\n                }\n            }\n        return additionalInfoHtml;\n    }\n//------------------------кнопки--------------------------------------------\n    handleButtonClick(event) {\n        const target = event.target;\n        if (target.classList.contains('editBtn')) {\n            this.redactCard();\n        } else if (target.classList.contains('deleteIcon')) {\n            this.deleteCard();\n        } else if (target.classList.contains(\"showMoreBtn\")){\n            this.showCard();\n        }\n    }\n\n    deleteCard() {\n        this.card.remove();\n    }\n    showCard(){\n        const showMoreBtn = this.card.querySelector('.showMoreBtn')\n        this.additionalInfoContainer.classList.toggle('active');\n        showMoreBtn.innerText = this.additionalInfoContainer.classList.contains(\"active\") ? \"Згорнути\" : \"Показати більше\";\n    }\n    redactCard() {\n        this.additionalInfoContainer.classList.add(\"hidden\");\n        this.btnContainer.classList.add(\"hidden\");\n\n        this.modal = document.createElement('div');\n        this.modal.classList.add('modal');\n        this.modal.innerHTML = `\n            <div class=\"modal-content\">\n                <h2>Редагування даних</h2>\n                ${this.renderEditFields()}\n                <button class=\"saveBtn\">Зберегти</button>\n            </div>\n        `;\n        this.card.append(this.modal)\n\n        const saveBtn = this.modal.querySelector('.saveBtn');\n        saveBtn.addEventListener('click', () => this.saveChanges());\n    }\n    renderEditFields() {\n        let editFieldsHtml = '';\n        for (const key in this.data) {\n            if (key !== 'selectedDoctor' && key !== 'fullName') {\n                const translatedKey = translations[key] || key;\n                if (key === 'urgency') {\n                    editFieldsHtml += `\n                        <div class=\"edit-field\">\n                            <label for=\"${key}\">${translatedKey}</label>\n                            <select id=\"${key}\">\n                                <option value=\"Звичайна\" ${this.data[key] === 'Звичайна' ? 'selected' : ''}>Звичайна</option>\n                                <option value=\"Пріоритетна\" ${this.data[key] === 'Пріоритетна' ? 'selected' : ''}>Пріоритетна</option>\n                                <option value=\"Невідкладна\" ${this.data[key] === 'Невідкладна' ? 'selected' : ''}>Невідкладна</option>\n                            </select>\n                        </div>\n                    `;\n                } else {\n                    editFieldsHtml += `\n                        <div class=\"edit-field\">\n                            <label for=\"${key}\">${translatedKey}</label>\n                            <input type=\"text\" id=\"${key}\" value=\"${this.data[key]}\">\n                        </div>\n                    `;\n                }\n            }\n        }\n        return editFieldsHtml;\n    }\n    saveChanges() {\n        const newData = {};\n        \n        for (const key in this.data) {\n            const inputField = document.getElementById(key);\n            if (inputField && inputField.value !== undefined) {\n                newData[key] = inputField.value;\n            }\n        }\n\n        for (const key in newData) {\n            if (this.data.hasOwnProperty(key)) {\n                this.data[key] = newData[key];\n            }\n        }\n        \n        this.modal.remove();\n        console.log(this.data);\n        this.updateAdditionalInfo();\n        this.additionalInfoContainer.classList.remove(\"hidden\");\n        this.btnContainer.classList.remove(\"hidden\");\n    }\n\n    updateAdditionalInfo() {\n        const newAdditionalInfoHtml = this.renderAdditionalInfo();\n        this.additionalInfoContainer.innerHTML = newAdditionalInfoHtml;\n    }\n\n\n//---------------------------------------------------------------------------\n    addToVisitsList() {\n        this.visitsListSection.appendChild(this.card);\n    }\n}\n//-----------------------------------------------------------------------------\n\nconst testObj ={ \n            selectedDoctor: 'Кардіолог',\n            purpose: 'Регулярний огляд',\n            description: 'Аналіз крові та артеріального тиску',\n            urgency: 'Пріоритетна',\n            fullName: 'Петренко Іван Петрович',\n            pressure: '120/80',\n            bmi: 24.5,\n            cardiovascularDiseases: 'Немає',\n            age: 35,\n            lastVisitDate: '2023-01-09'\n        }\nconst translations = {\n            doctorName: 'Лікар',\n            purpose: 'Мета візиту',\n            description: 'Короткий опис візиту',\n            urgency: 'Терміновість',\n            fullName: 'ПІБ',\n            pressure: 'Звичайний тиск',\n            bmi: 'Індекс маси тіла',\n            cardiovascularDiseases: 'Перенесені захворювання серцево-судинної системи',\n            age: 'Вік',\n            lastVisitDate: 'Дата останнього відвідування'\n};\n\n        const cardInstance = new Card(testObj);\n        cardInstance.addToVisitsList();\n\n        const cardInstance2 = new Card(testObj);\n        cardInstance2.addToVisitsList()\n\n        const cardInstance3 = new Card(testObj);\n        cardInstance3.addToVisitsList()"]}
=========
{"version":3,"sources":["01_main.js"],"names":["visitContainer","document","querySelector","loginButton","getElementById","addEventListener","Login","userToken","createCardButton","CreateVisitModal","[object Object]","classList","toggle","this","modal","createElement","add","innerHTML","body","appendChild","selectElement","fieldsContainer","handleDoctorChange","bind","selectedDoctor","value","updateAdditionalFields","createInputField","createSelectField","createBtn","innerText","createVisit","closeBtn","closeVisitModal","remove","inputs","querySelectorAll","visitData","options","selectedIndex","text","forEach","input","id","type","visit","console","log","pushToServer","fetch","method","headers","Content-Type","Authorization","JSON","stringify","then","response","ok","Error","status","json","Card","addToVisitsList","catch","error","fieldName","label","inputField","selectField","selectOptions","map","option","join","toLowerCase","data","card","createCard","visitsListSection","additionalInfoContainer","btnContainer","cardInstance","cardElement","fullName","renderAdditionalInfo","handleButtonClick","additionalInfoHtml","key","translations","event","target","contains","redactCard","deleteCard","showCard","showMoreBtn","renderEditFields","append","saveChanges","editFieldsHtml","translatedKey","newData","undefined","hasOwnProperty","updateAdditionalInfo","newAdditionalInfoHtml","createLoginModal","loginEventButton","errorElement","loginEvent","loginModal","emailInput","passwordInput","email","password","token","displayCards","clearFields","showError","hideError","message","textContent","cardData","Filter","initElements","attachListeners","visitTitleInput","urgencyFilterSelect","handleInputChange","handleSelectChange","inputValue","applyFilters","selectValue","selectedUrgency","inputDescriptionOrPurpose","trim","urgencyValue","urgency","descriptionValue","description","purposeValue","purpose","includes","filter","doctorName","pressure","bmi","cardiovascularDiseases","age","lastVisitDate"],"mappings":"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","file":"../js/main.min.js","sourcesContent":["const visitContainer = document.querySelector(\".visits-list\");\nconst loginButton = document.getElementById('header-userActions-loginButton');\nloginButton.addEventListener(\"click\", () => new Login());\nlet userToken = \"\";\n\n\nconst createCardButton = document.getElementById('header-userActions-createCard');\ncreateCardButton.addEventListener('click', () => {\n    let createVisit = new CreateVisitModal();\n});\n\n\nclass CreateVisitModal {\n    constructor() {\n        createCardButton.classList.toggle(\"hidden\");\n\n        this.modal = document.createElement('div');\n        this.modal.classList.add('creadeVisitModal');\n        this.modal.innerHTML = `\n        <div class=\"modal-content\">\n            <label for=\"doctorSelect\">Оберіть лікаря:</label>\n            <select id=\"doctorSelect\">\n                <option value=\"\" disabled selected hidden>Оберіть лікаря</option>\n                <option value=\"cardiologist\">Кардіолог</option>\n                <option value=\"dentist\">Стоматолог</option>\n                <option value=\"therapist\">Терапевт</option>\n            </select>\n            <div id=\"fieldsContainer\"></div>\n        </div>\n        `;\n\n        document.body.appendChild(this.modal);\n\n        this.selectElement = document.getElementById('doctorSelect');\n        this.fieldsContainer = document.getElementById('fieldsContainer');\n        this.selectElement.addEventListener('change', this.handleDoctorChange.bind(this));\n    }\n    handleDoctorChange() {\n        const selectedDoctor = this.selectElement.value;\n        this.updateAdditionalFields(selectedDoctor);\n    }\n    updateAdditionalFields(selectedDoctor) {\n\n        this.fieldsContainer.innerHTML = '';\n\n        this.createInputField(\"purpose\",\"Мета візиту\")\n        this.createInputField(\"description\",\"Короткий опис візиту\")\n        this.createSelectField(\"urgency\", \"Терміновість\", [\"Звичайна\", \"Пріоритетна\", \"Невідкладна\"],\"оберіть терміновість\");\n        this.createInputField(\"fullName\",\"ПІБ\")\n\n        if (selectedDoctor === 'cardiologist') {\n            this.createInputField('pressure', 'Звичайний тиск:');\n            this.createInputField('bmi', 'Індекс маси тіла:');\n            this.createInputField('cardiovascularDiseases', 'Перенесені захворювання серцево-судинної системи:');\n            this.createInputField('age', 'Вік:');\n        } else if (selectedDoctor === 'dentist') {\n            this.createInputField('lastVisitDate', 'Дата останнього відвідування:');\n        } else if (selectedDoctor === 'therapist') {\n            this.createInputField('age', 'Вік:');\n        }\n\n        const createBtn = document.createElement('button');\n        createBtn.innerText = 'Створити';\n        createBtn.addEventListener('click', () => this.createVisit());\n        this.fieldsContainer.appendChild(createBtn);\n\n        const closeBtn = document.createElement('button');\n        closeBtn.innerText = 'Закрити';\n        closeBtn.addEventListener('click', () => this.closeVisitModal());\n        this.fieldsContainer.appendChild(closeBtn);\n\n    }\n\n    closeVisitModal(){\n        this.modal.remove();\n        createCardButton.classList.toggle(\"hidden\");\n    }\n    createVisit(){\n        const inputs = this.fieldsContainer.querySelectorAll('.modalInput');\n        const visitData = {};\n\n        visitData['selectedDoctor'] = visitData['selectedDoctor'] = this.selectElement.options[this.selectElement.selectedIndex].text;;\n\n        inputs.forEach(input => {\n            const id = input.id;\n            const value = input.type === 'select-one' ? input.options[input.selectedIndex].value : input.value;\n            visitData[id] = value;\n        });\n\n        this.visit = visitData;\n        console.log(this.visit);\n\n        this.closeVisitModal();\n\n        this.pushToServer(this.visit);\n    }\n\n    pushToServer(visit) {\n        fetch(\"https://ajax.test-danit.com/api/v2/cards\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${userToken}`\n            },\n            body: JSON.stringify(visit) \n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(response => {\n            console.log(response)\n            const card = new Card(response);\n        card.addToVisitsList();\n        })\n        .catch(error => console.error('Помилка:', error));\n    }\n\n    createInputField(fieldName, label) {\n        const inputField = document.createElement('div');\n        inputField.innerHTML = `\n            <label for=\"${fieldName}\">${label}</label>\n            <input type=\"text\" id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\n        `;\n        this.fieldsContainer.appendChild(inputField);\n    }\n    createSelectField(fieldName, label, options) {\n        const selectField = document.createElement('div');\n        const selectOptions = options.map(option => `<option value=\"${option}\">${option}</option>`).join('');\n        selectField.innerHTML = `\n            <label for=\"${fieldName}\">${label}</label>\n            <select id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\n                <option value=\"\" disabled selected hidden>Оберіть ${label.toLowerCase()}</option>\n                ${selectOptions}\n            </select>\n        `;\n        this.fieldsContainer.appendChild(selectField);\n    }\n}\n\n//----------------------------------------------------------------------------------------\nclass Card {\n    constructor(visitData) {\n        this.data = visitData;\n        this.card = this.createCard();\n        this.visitsListSection = document.querySelector('.visits-list');\n        this.additionalInfoContainer = this.card.querySelector('.additionalInfoContainer');\n        this.btnContainer = this.card.querySelector(\".buttonsContainer\")\n        this.modal \n\n        this.card.cardInstance = this;\n    }\n\n    createCard() {\n        const cardElement = document.createElement(\"div\");\n        cardElement.classList.add(\"visitCard\");\n        cardElement.innerHTML = `\n            <div class=\"visibleInfo\">\n                <p>ПІБ: ${this.data.fullName}</p>\n                <p>Лікар: ${this.data.selectedDoctor}</p>\n            </div>\n            <div class=\"additionalInfoContainer\">\n                ${this.renderAdditionalInfo()}\n            </div>\n            <div class=\"buttonsContainer\">\n                <button class=\"showMoreBtn\">Показати більше</button>\n                <button class=\"editBtn\">Редагувати</button>\n                <button class=\"deleteIcon\">❌</button>\n            </div>\n        `;\n        cardElement.addEventListener('click', this.handleButtonClick.bind(this));\n        return cardElement;\n    }\n\n    renderAdditionalInfo() {\n        let additionalInfoHtml = '';\n            for (const key in this.data) {\n                if (key !== 'selectedDoctor' && key !== 'fullName') {\n                    const translatedKey = translations[key] || key;\n                    additionalInfoHtml += `<p>${translatedKey}: ${this.data[key]}</p>`;\n                }\n            }\n        return additionalInfoHtml;\n    }\n//------------------------кнопки--------------------------------------------\n    handleButtonClick(event) {\n        const target = event.target;\n        if (target.classList.contains('editBtn')) {\n            this.redactCard();\n        } else if (target.classList.contains('deleteIcon')) {\n            this.deleteCard();\n        } else if (target.classList.contains(\"showMoreBtn\")){\n            this.showCard();\n        }\n    }\n\n    deleteCard() {\n        this.card.remove();\n    }\n    showCard(){\n        const showMoreBtn = this.card.querySelector('.showMoreBtn')\n        this.additionalInfoContainer.classList.toggle('active');\n        showMoreBtn.innerText = this.additionalInfoContainer.classList.contains(\"active\") ? \"Згорнути\" : \"Показати більше\";\n    }\n    redactCard() {\n        this.additionalInfoContainer.classList.add(\"hidden\");\n        this.btnContainer.classList.add(\"hidden\");\n\n        this.modal = document.createElement('div');\n        this.modal.classList.add('modal');\n        this.modal.innerHTML = `\n            <div class=\"modal-content\">\n                <h2>Редагування даних</h2>\n                ${this.renderEditFields()}\n                <button class=\"saveBtn\">Зберегти</button>\n            </div>\n        `;\n        this.card.append(this.modal)\n\n        const saveBtn = this.modal.querySelector('.saveBtn');\n        saveBtn.addEventListener('click', () => this.saveChanges());\n    }\n    renderEditFields() {\n        let editFieldsHtml = '';\n        for (const key in this.data) {\n            if (key !== 'selectedDoctor' && key !== 'fullName') {\n                const translatedKey = translations[key] || key;\n                if (key === 'urgency') {\n                    editFieldsHtml += `\n                        <div class=\"edit-field\">\n                            <label for=\"${key}\">${translatedKey}</label>\n                            <select id=\"${key}\">\n                                <option value=\"Звичайна\" ${this.data[key] === 'Звичайна' ? 'selected' : ''}>Звичайна</option>\n                                <option value=\"Пріоритетна\" ${this.data[key] === 'Пріоритетна' ? 'selected' : ''}>Пріоритетна</option>\n                                <option value=\"Невідкладна\" ${this.data[key] === 'Невідкладна' ? 'selected' : ''}>Невідкладна</option>\n                            </select>\n                        </div>\n                    `;\n                } else {\n                    editFieldsHtml += `\n                        <div class=\"edit-field\">\n                            <label for=\"${key}\">${translatedKey}</label>\n                            <input type=\"text\" id=\"${key}\" value=\"${this.data[key]}\">\n                        </div>\n                    `;\n                }\n            }\n        }\n        return editFieldsHtml;\n    }\n    saveChanges() {\n        const newData = {};\n        \n        for (const key in this.data) {\n            const inputField = document.getElementById(key);\n            if (inputField && inputField.value !== undefined) {\n                newData[key] = inputField.value;\n            }\n        }\n\n        for (const key in newData) {\n            if (this.data.hasOwnProperty(key)) {\n                this.data[key] = newData[key];\n            }\n        }\n        \n        this.modal.remove();\n        console.log(this.data);\n        this.updateAdditionalInfo();\n        this.additionalInfoContainer.classList.remove(\"hidden\");\n        this.btnContainer.classList.remove(\"hidden\");\n    }\n\n    updateAdditionalInfo() {\n        const newAdditionalInfoHtml = this.renderAdditionalInfo();\n        this.additionalInfoContainer.innerHTML = newAdditionalInfoHtml;\n    }\n\n\n//---------------------------------------------------------------------------\n    addToVisitsList() {\n        this.visitsListSection.appendChild(this.card);\n    }\n}\n//-------login------------------------------------------------------------\nclass Login {\n    constructor() {\n        this.modal = this.createLoginModal();\n        document.body.append(this.modal);\n        this.loginButton = document.getElementById('header-userActions-loginButton');\n        this.loginButton.classList.add(\"hidden\");\n        this.loginEventButton = this.modal.querySelector(\"#loginBtn\");\n        this.errorElement = this.modal.querySelector(\"#error-message\"); // Додали елемент для відображення повідомлення про помилку\n        this.loginEventButton.addEventListener('click', () => this.loginEvent());\n    }\n\n    createLoginModal() {\n        const loginModal = document.createElement('div');\n        loginModal.classList.add('loginModal');\n        loginModal.innerHTML = `\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" />\n            <br />\n            <label for=\"password\">Пароль:</label>\n            <input type=\"password\" id=\"password\" />\n            <br />\n            <button id=\"loginBtn\">Увійти</button>\n            <p id=\"error-message\" class=\"error-message\"></p> <!-- Додали елемент для відображення повідомлення про помилку -->\n        `;\n        return loginModal;\n    }\n\n    loginEvent() {\n        const emailInput = this.modal.querySelector(\"#email\");\n        const passwordInput = this.modal.querySelector(\"#password\");\n        const email = emailInput.value;\n        const password = passwordInput.value;\n\n        fetch(\"https://ajax.test-danit.com/api/v2/cards/login\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ email, password })\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Неправильні дані');\n            }\n            return response.text();\n        })\n        .then(token => {\n            userToken = token;\n            console.log(userToken);\n\n            createCardButton.classList.add('active');\n            this.displayCards();\n\n            this.modal.remove();\n        })\n        .catch(error => {\n            console.error('Error:', error);\n            this.clearFields();\n            this.showError('Неправильні дані'); \n        });\n    }\n\n    clearFields() {\n        const emailInput = this.modal.querySelector(\"#email\");\n        const passwordInput = this.modal.querySelector(\"#password\");\n        emailInput.value = '';\n        passwordInput.value = '';\n        this.hideError(); \n    }\n    showError(message) {\n        this.errorElement.textContent = message;\n        this.errorElement.classList.add(\"visible\");\n    }\n    hideError() {\n        this.errorElement.textContent = '';\n        this.errorElement.classList.remove(\"visible\");\n    }\n    displayCards(){\n        fetch(\"https://ajax.test-danit.com/api/v2/cards\", {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${userToken}`\n        }\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(data => {\n            data.forEach(cardData => {\n                const card = new Card(cardData);\n                card.addToVisitsList();\n            });\n        })\n        .catch(error => console.error('Помилка:', error));\n            }\n        }\n\n//-----------------------------------------------------------------------\nclass Filter {\n    constructor() {\n        this.initElements();\n        this.attachListeners();\n    }\n    initElements() {\n        this.visitTitleInput = document.getElementById('visitTitle');\n        this.urgencyFilterSelect = document.getElementById('urgencyFilter');\n    }\n    attachListeners() {\n        this.visitTitleInput.addEventListener('input', this.handleInputChange.bind(this));\n        this.urgencyFilterSelect.addEventListener('change', this.handleSelectChange.bind(this));\n    }\n    handleInputChange(event) {\n        const inputValue = event.target.value;\n        console.log(`Input changed: ${inputValue}`);\n        this.applyFilters();\n    }\n    handleSelectChange(event) {\n        const selectValue = event.target.value;\n        console.log(`Select changed: ${selectValue}`);\n        this.applyFilters();\n    }\n    applyFilters() {\n        const selectedUrgency = this.urgencyFilterSelect.value;\n        const inputDescriptionOrPurpose = this.visitTitleInput.value.toLowerCase().trim();\n    \n        const visitCards = document.querySelectorAll('.visitCard');\n    \n        visitCards.forEach(cardElement => {\n            const cardInstance = cardElement.cardInstance;\n    \n            const urgencyValue = cardInstance.data.urgency;\n            const descriptionValue = cardInstance.data.description.toLowerCase().trim();\n            const purposeValue = cardInstance.data.purpose.toLowerCase().trim();\n    \n            if (\n                (selectedUrgency === urgencyValue || selectedUrgency === \"Усі\") &&\n                (descriptionValue.includes(inputDescriptionOrPurpose) || purposeValue.includes(inputDescriptionOrPurpose))\n            ) {\n                cardElement.classList.remove('hidden');  \n            } else {\n                cardElement.classList.add('hidden');   \n            }\n        });\n    }\n}\n\nconst filter = new Filter();\n//----------------------------------------------------------------\n// const testObj ={ \n//             selectedDoctor: 'Кардіолог',\n//             purpose: 'Регулярний огляд',\n//             description: 'Аналіз крові та артеріального тиску',\n//             urgency: 'Пріоритетна',\n//             fullName: 'Петренко Іван Петрович',\n//             pressure: '120/80',\n//             bmi: 24.5,\n//             cardiovascularDiseases: 'Немає',\n//             age: 35,\n//             lastVisitDate: '2023-01-09'\n//         }\nconst translations = {\n            doctorName: 'Лікар',\n            purpose: 'Мета візиту',\n            description: 'Короткий опис візиту',\n            urgency: 'Терміновість',\n            fullName: 'ПІБ',\n            pressure: 'Звичайний тиск',\n            bmi: 'Індекс маси тіла',\n            cardiovascularDiseases: 'Перенесені захворювання серцево-судинної системи',\n            age: 'Вік',\n            lastVisitDate: 'Дата останнього відвідування'\n};\n\n        // const cardInstance = new Card(testObj);\n        // cardInstance.addToVisitsList();\n\n        // const cardInstance2 = new Card(testObj);\n        // cardInstance2.addToVisitsList()\n\n        // const cardInstance3 = new Card(testObj);\n        // cardInstance3.addToVisitsList()"]}
>>>>>>>>> Temporary merge branch 2
