{"version":3,"sources":["01_main.js"],"names":["visitContainer","document","querySelector","CreateVisitModal","[object Object]","this","modal","createElement","classList","add","innerHTML","body","appendChild","selectElement","getElementById","fieldsContainer","addEventListener","handleDoctorChange","bind","selectedDoctor","value","updateAdditionalFields","createInputField","createSelectField","createBtn","innerText","createVisit","closeBtn","closeVisitModal","remove","inputs","querySelectorAll","visitData","options","selectedIndex","text","forEach","input","id","type","visit","console","log","fieldName","label","inputField","selectField","selectOptions","map","option","join","toLowerCase","VisitCard","isExpanded","isEditing","createCardElement","render","cardElement","fullName","doctorName","toggleExpanded","toggleEditing","saveChanges","deleteCard","showMoreButton","disabled","additionalInfoContainer","Object","keys","key","translatedKey","translations","showMoreBtn","displayEditForm","hideEditForm","updateShowMoreButtonOnEditing","style","display","renderEditForm","visibleInfoContainer","urgencyOptions","updateVisitData","VisitCardManager","visitsList","visitCard","visitCardManager","purpose","description","urgency","bloodPressure","bmi","cardiovascularDiseases","age","lastVisitDate","visitsData","addVisitCard"],"mappings":"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","file":"../js/main.min.js","sourcesContent":["const visitContainer = document.querySelector(\".visits-list\");\n\nclass CreateVisitModal {\n    constructor() {\n        this.modal = document.createElement('div');\n        this.modal.classList.add('creadeVisitModal');\n        this.modal.innerHTML = `\n        <div class=\"modal-content\">\n            <label for=\"doctorSelect\">Оберіть лікаря:</label>\n            <select id=\"doctorSelect\">\n                <option value=\"\" disabled selected hidden>Оберіть лікаря</option>\n                <option value=\"cardiologist\">Кардіолог</option>\n                <option value=\"dentist\">Стоматолог</option>\n                <option value=\"therapist\">Терапевт</option>\n            </select>\n            <div id=\"fieldsContainer\"></div>\n        </div>\n        `;\n\n        document.body.appendChild(this.modal);\n\n        this.selectElement = document.getElementById('doctorSelect');\n        this.fieldsContainer = document.getElementById('fieldsContainer');\n        this.selectElement.addEventListener('change', this.handleDoctorChange.bind(this));\n    }\n    handleDoctorChange() {\n        const selectedDoctor = this.selectElement.value;\n        this.updateAdditionalFields(selectedDoctor);\n    }\n    updateAdditionalFields(selectedDoctor) {\n\n        this.fieldsContainer.innerHTML = '';\n\n        this.createInputField(\"purpose\",\"Мета візиту\")\n        this.createInputField(\"description\",\"Короткий опис візиту\")\n        this.createSelectField(\"urgency\", \"Терміновість\", [\"Звичайна\", \"Пріоритетна\", \"Невідкладна\"],\"оберіть терміновість\");\n        this.createInputField(\"fullName\",\"ПІБ\")\n\n        if (selectedDoctor === 'cardiologist') {\n            this.createInputField('pressure', 'Звичайний тиск:');\n            this.createInputField('bmi', 'Індекс маси тіла:');\n            this.createInputField('heartDiseases', 'Перенесені захворювання серцево-судинної системи:');\n            this.createInputField('age', 'Вік:');\n        } else if (selectedDoctor === 'dentist') {\n            this.createInputField('lastVisitDate', 'Дата останнього відвідування:');\n        } else if (selectedDoctor === 'therapist') {\n            this.createInputField('age', 'Вік:');\n        }\n\n        const createBtn = document.createElement('button');\n        createBtn.innerText = 'Створити';\n        createBtn.addEventListener('click', () => this.createVisit());\n        this.fieldsContainer.appendChild(createBtn);\n\n        const closeBtn = document.createElement('button');\n        closeBtn.innerText = 'Закрити';\n        closeBtn.addEventListener('click', () => this.closeVisitModal());\n        this.fieldsContainer.appendChild(closeBtn);\n\n    }\n\n    closeVisitModal(){\n        this.modal.remove();\n    }\n    createVisit(){\n        const inputs = this.fieldsContainer.querySelectorAll('.modalInput');\n        const visitData = {};\n\n        visitData['selectedDoctor'] = visitData['selectedDoctor'] = this.selectElement.options[this.selectElement.selectedIndex].text;;\n\n        inputs.forEach(input => {\n            const id = input.id;\n            const value = input.type === 'select-one' ? input.options[input.selectedIndex].value : input.value;\n            visitData[id] = value;\n        });\n\n        this.visit = visitData;\n        \n        console.log(createVisit.visit);\n        this.closeVisitModal();\n        //виклик функції для створення картки та відправлення на сервер------\n        \n        //-------------------------------------------------------------------\n    }\n\n    createInputField(fieldName, label) {\n        const inputField = document.createElement('div');\n        inputField.innerHTML = `\n            <label for=\"${fieldName}\">${label}</label>\n            <input type=\"text\" id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\n        `;\n        this.fieldsContainer.appendChild(inputField);\n    }\n    createSelectField(fieldName, label, options) {\n        const selectField = document.createElement('div');\n        const selectOptions = options.map(option => `<option value=\"${option}\">${option}</option>`).join('');\n        selectField.innerHTML = `\n            <label for=\"${fieldName}\">${label}</label>\n            <select id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\n                <option value=\"\" disabled selected hidden>Оберіть ${label.toLowerCase()}</option>\n                ${selectOptions}\n            </select>\n        `;\n        this.fieldsContainer.appendChild(selectField);\n    }\n}\n\n//тестова строчка допоки не буде кнопки для створення візиту--------\nconst createVisit = new CreateVisitModal();\n//------------------------------------------------------------------\n\n// картка візиту\nclass VisitCard {\n    constructor(visitData) {\n        this.visitData = visitData;\n        this.isExpanded = false;\n        this.isEditing = false;\n        this.createCardElement();\n        this.render();\n    }\n\n    createCardElement() {\n        this.cardElement = document.createElement('div');\n        this.cardElement.classList.add('visitCard');\n\n        // Додати інформацію, яка завжди видима\n        this.cardElement.innerHTML = `\n            <div class=\"visibleInfo\">\n                <p>ПІБ: ${this.visitData.fullName}</p>\n                <p>Лікар: ${this.visitData.doctorName}</p>\n            </div>\n            <div class=\"additionalInfoContainer\"></div>\n            <button class=\"showMoreBtn\">Показати більше</button>\n            <button class=\"editBtn\">Редагувати</button>\n            <button class=\"saveChangesBtn\" style=\"display: none;\">Зберегти зміни</button>\n            <span class=\"deleteIcon\">❌</span>\n        `;\n\n        // Додати обробники подій\n        this.cardElement.querySelector('.showMoreBtn').addEventListener('click', () => this.toggleExpanded());\n        this.cardElement.querySelector('.editBtn').addEventListener('click', () => this.toggleEditing());\n        this.cardElement.querySelector('.saveChangesBtn').addEventListener('click', () => this.saveChanges());\n        this.cardElement.querySelector('.deleteIcon').addEventListener('click', () => this.deleteCard());\n    }\n\n    updateShowMoreButtonOnEditing() {\n        const showMoreButton = this.cardElement.querySelector('.showMoreBtn');\n        if (showMoreButton) {\n            showMoreButton.disabled = this.isEditing;\n        }\n    }\n\n    render() {\n        const additionalInfoContainer = this.cardElement.querySelector('.additionalInfoContainer');\n        additionalInfoContainer.innerHTML = '';\n\n        if (this.isExpanded && !this.isEditing) {\n            Object.keys(this.visitData).forEach(key => {\n                const translatedKey = translations[key] || key;\n\n                if (key === 'urgency' && !this.isEditing) {\n                    additionalInfoContainer.innerHTML += `\n                        <p>${translatedKey}: ${this.visitData[key]}</p>\n                    `;\n                } else if (key !== 'doctorName') {\n                    additionalInfoContainer.innerHTML += `<p>${translatedKey}: ${this.visitData[key]}</p>`;\n                }\n            });\n        }\n\n        document.querySelector('.visits-list').appendChild(this.cardElement);\n\n        const showMoreBtn = this.cardElement.querySelector('.showMoreBtn');\n        showMoreBtn.disabled = this.isEditing;\n        showMoreBtn.innerText = this.isExpanded ? 'Приховати' : 'Показати більше';\n    }\n\n    toggleExpanded() {\n        this.isExpanded = !this.isExpanded;\n        this.render();\n    }\n\n    toggleEditing() {\n        this.isEditing = !this.isEditing;\n    \n        if (this.isEditing) {\n            this.displayEditForm();\n            this.cardElement.querySelector('.showMoreBtn').disabled = true;\n        } else {\n            this.saveChanges();\n            this.hideEditForm();\n            this.cardElement.querySelector('.showMoreBtn').disabled = false;\n        }\n    \n        this.render();\n        this.updateShowMoreButtonOnEditing();\n    }\n\n    displayEditForm(visitData) {\n        const additionalInfoContainer = this.cardElement.querySelector('.additionalInfoContainer');\n        const visibleInfoContainer = this.cardElement.querySelector('.visibleInfo');\n    \n        visibleInfoContainer.style.display = 'none';\n        additionalInfoContainer.style.display = 'block';\n    \n        // Встановлюємо значення visitData для використання у формі редагування\n        this.visitData = visitData;\n    \n        this.renderEditForm();\n    }\n\n    hideEditForm() {\n        const additionalInfoContainer = this.cardElement.querySelector('.additionalInfoContainer');\n        const visibleInfoContainer = this.cardElement.querySelector('.visibleInfo');\n    \n        additionalInfoContainer.style.display = 'none';\n        visibleInfoContainer.style.display = 'block';\n    \n        this.cardElement.querySelector('.editBtn').style.display = 'inline-block';\n        this.cardElement.querySelector('.saveChangesBtn').style.display = 'none';\n    \n        if (this.isExpanded) {\n            additionalInfoContainer.style.display = 'block';\n        }\n    \n        this.render();\n        this.updateShowMoreButtonOnEditing();\n    }\n\n    renderEditForm() {\n        const additionalInfoContainer = this.cardElement.querySelector('.additionalInfoContainer');\n        additionalInfoContainer.innerHTML = '<div class=\"editForm\">';\n    \n        Object.keys(this.visitData).forEach(key => {\n            if (key !== 'doctorName') {\n                const translatedKey = translations[key] || key;\n                if (key === 'urgency') {\n                    // Додайте дропдаун для \"Терміновості\"\n                    additionalInfoContainer.innerHTML += `\n                        <div>\n                            <label for=\"edited${key}\">${translatedKey}:</label>\n                            <select id=\"edited${key}\">\n                                ${urgencyOptions.map(option => `<option value=\"${option}\" ${this.visitData[key] === option ? 'selected' : ''}>${option}</option>`).join('')}\n                            </select>\n                        </div>\n                    `;\n                } else {\n                    // Звичайний ввід для інших полів\n                    additionalInfoContainer.innerHTML += `\n                        <div>\n                            <label for=\"edited${key}\">${translatedKey}:</label>\n                            <input type=\"text\" id=\"edited${key}\" value=\"${this.visitData[key]}\">\n                        </div>\n                    `;\n                }\n            }\n        });\n    \n        additionalInfoContainer.innerHTML += '</div>';\n    \n        this.cardElement.querySelector('.editBtn').style.display = 'none';\n        this.cardElement.querySelector('.saveChangesBtn').style.display = 'inline-block';\n    \n        this.cardElement.querySelector('.saveChangesBtn').addEventListener('click', () => this.saveChanges());\n    }\n\n    updateVisitData() {\n        const additionalInfoContainer = this.cardElement.querySelector('.additionalInfoContainer');\n    \n        Object.keys(this.visitData).forEach(key => {\n            if (key !== 'doctorName') {\n                this.visitData[key] = document.getElementById(`edited${key}`).value;\n            }\n        });\n    \n        additionalInfoContainer.innerHTML = '';\n    \n        Object.keys(this.visitData).forEach(key => {\n            additionalInfoContainer.innerHTML += `<p>${key}: ${this.visitData[key]}</p>`;\n        });\n    \n        this.render();\n    }\n\n    saveChanges() {\n        this.updateVisitData();\n        // this.hideEditForm();\n        this.updateShowMoreButtonOnEditing();\n        this.render();\n    }\n\n    deleteCard() {\n        this.cardElement.remove();\n    }\n}\n\nclass VisitCardManager {\n    constructor() {\n        this.visitsList = document.querySelector('.visits-list');\n    }\n\n    addVisitCard(visitData) {\n        const visitCard = new VisitCard(visitData);\n        this.visitsList.appendChild(visitCard.cardElement);\n    \n        // Додайте обробник подій для кнопки \"Редагувати\"\n        visitCard.cardElement.querySelector('.editBtn').addEventListener('click', () => visitCard.displayEditForm(visitData));\n    }\n}\n\nconst visitCardManager = new VisitCardManager();\n\nconst translations = {\n    doctorName: 'Лікар',\n    purpose: 'Мета',\n    description: 'Опис',\n    urgency: 'Терміновість',\n    fullName: 'ПІБ',\n    bloodPressure: 'Тиск',\n    bmi: 'ІМТ',\n    cardiovascularDiseases: 'Кардіоваскулярні захворювання',\n    age: 'Вік',\n    lastVisitDate: 'Дата останнього візиту'\n};\n\nconst urgencyOptions = ['Висока', 'Середня', 'Низька'];\n\n// Приклад данних для кількох візитів\nconst visitsData = [\n    { \n        doctorName: 'Доктор Іванова',\n        purpose: 'Регулярний огляд',\n        description: 'Аналіз крові та артеріального тиску',\n        urgency: 'Пріоритетна',\n        fullName: 'Петренко Іван Петрович',\n        bloodPressure: '120/80',\n        bmi: 24.5,\n        cardiovascularDiseases: 'Немає',\n        age: 35,\n        lastVisitDate: '2023-01-09'\n    },\n    // { \n    //     doctorName: 'Доктор Іванова',\n    //     purpose: 'Регулярний огляд',\n    //     description: 'Аналіз крові та артеріального тиску',\n    //     urgency: 'Пріоритетна',\n    //     fullName: 'Петренко Іван Петрович',\n    //     bloodPressure: '120/80',\n    //     bmi: 24.5,\n    //     cardiovascularDiseases: 'Немає',\n    //     age: 35,\n    //     lastVisitDate: '2023-01-09'\n    // },\n    // Додавайте більше об'єктів даних візитів за потреби\n];\n\nvisitsData.forEach(visitData => {\n    visitCardManager.addVisitCard(visitData);\n});\n"]}