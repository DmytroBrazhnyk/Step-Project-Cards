{"version":3,"sources":["01_main.js"],"names":["visitContainer","document","querySelector","CreateVisitModal","[object Object]","this","modal","createElement","classList","add","innerHTML","body","appendChild","selectElement","getElementById","fieldsContainer","addEventListener","handleDoctorChange","bind","selectedDoctor","value","updateAdditionalFields","createInputField","createSelectField","createBtn","innerText","createVisit","closeBtn","closeVisitModal","remove","inputs","querySelectorAll","visitData","options","selectedIndex","text","forEach","input","id","type","visit","console","log","Card","addToVisitsList","fieldName","label","inputField","selectField","selectOptions","map","option","join","toLowerCase","data","isEditing","card","createCard","visitsListSection","additionalInfoContainer","btnContainer","cardElement","fullName","renderAdditionalInfo","handleButtonClick","additionalInfoHtml","key","translations","event","target","contains","redactCard","deleteCard","showCard","showMoreBtn","toggle","currentEditingCard","renderEditFields","append","saveChanges","editFieldsHtml","translatedKey","newData","undefined","hasOwnProperty","updateAdditionalInfo","newAdditionalInfoHtml","testObj","purpose","description","urgency","pressure","bmi","cardiovascularDiseases","age","lastVisitDate","doctorName","cardInstance","cardInstance2","cardInstance3"],"mappings":"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","file":"../js/main.min.js","sourcesContent":["const visitContainer = document.querySelector(\".visits-list\");\r\n\r\nclass CreateVisitModal {\r\n    constructor() {\r\n        this.modal = document.createElement('div');\r\n        this.modal.classList.add('creadeVisitModal');\r\n        this.modal.innerHTML = `\r\n        <div class=\"modal-content\">\r\n            <label for=\"doctorSelect\">Оберіть лікаря:</label>\r\n            <select id=\"doctorSelect\">\r\n                <option value=\"\" disabled selected hidden>Оберіть лікаря</option>\r\n                <option value=\"cardiologist\">Кардіолог</option>\r\n                <option value=\"dentist\">Стоматолог</option>\r\n                <option value=\"therapist\">Терапевт</option>\r\n            </select>\r\n            <div id=\"fieldsContainer\"></div>\r\n        </div>\r\n        `;\r\n\r\n        document.body.appendChild(this.modal);\r\n\r\n        this.selectElement = document.getElementById('doctorSelect');\r\n        this.fieldsContainer = document.getElementById('fieldsContainer');\r\n        this.selectElement.addEventListener('change', this.handleDoctorChange.bind(this));\r\n    }\r\n    handleDoctorChange() {\r\n        const selectedDoctor = this.selectElement.value;\r\n        this.updateAdditionalFields(selectedDoctor);\r\n    }\r\n    updateAdditionalFields(selectedDoctor) {\r\n\r\n        this.fieldsContainer.innerHTML = '';\r\n\r\n        this.createInputField(\"purpose\",\"Мета візиту\")\r\n        this.createInputField(\"description\",\"Короткий опис візиту\")\r\n        this.createSelectField(\"urgency\", \"Терміновість\", [\"Звичайна\", \"Пріоритетна\", \"Невідкладна\"],\"оберіть терміновість\");\r\n        this.createInputField(\"fullName\",\"ПІБ\")\r\n\r\n        if (selectedDoctor === 'cardiologist') {\r\n            this.createInputField('pressure', 'Звичайний тиск:');\r\n            this.createInputField('bmi', 'Індекс маси тіла:');\r\n            this.createInputField('cardiovascularDiseases', 'Перенесені захворювання серцево-судинної системи:');\r\n            this.createInputField('age', 'Вік:');\r\n        } else if (selectedDoctor === 'dentist') {\r\n            this.createInputField('lastVisitDate', 'Дата останнього відвідування:');\r\n        } else if (selectedDoctor === 'therapist') {\r\n            this.createInputField('age', 'Вік:');\r\n        }\r\n\r\n        const createBtn = document.createElement('button');\r\n        createBtn.innerText = 'Створити';\r\n        createBtn.addEventListener('click', () => this.createVisit());\r\n        this.fieldsContainer.appendChild(createBtn);\r\n\r\n        const closeBtn = document.createElement('button');\r\n        closeBtn.innerText = 'Закрити';\r\n        closeBtn.addEventListener('click', () => this.closeVisitModal());\r\n        this.fieldsContainer.appendChild(closeBtn);\r\n\r\n    }\r\n\r\n    closeVisitModal(){\r\n        this.modal.remove();\r\n    }\r\n    createVisit(){\r\n        const inputs = this.fieldsContainer.querySelectorAll('.modalInput');\r\n        const visitData = {};\r\n\r\n        visitData['selectedDoctor'] = visitData['selectedDoctor'] = this.selectElement.options[this.selectElement.selectedIndex].text;;\r\n\r\n        inputs.forEach(input => {\r\n            const id = input.id;\r\n            const value = input.type === 'select-one' ? input.options[input.selectedIndex].value : input.value;\r\n            visitData[id] = value;\r\n        });\r\n\r\n        this.visit = visitData;\r\n        \r\n        console.log(createVisit.visit);\r\n        this.closeVisitModal();\r\n        //виклик функції для створення картки та відправлення на сервер------\r\n        const card = new Card(createVisit.visit);\r\n        card.addToVisitsList();\r\n        //-------------------------------------------------------------------\r\n    }\r\n\r\n    createInputField(fieldName, label) {\r\n        const inputField = document.createElement('div');\r\n        inputField.innerHTML = `\r\n            <label for=\"${fieldName}\">${label}</label>\r\n            <input type=\"text\" id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\r\n        `;\r\n        this.fieldsContainer.appendChild(inputField);\r\n    }\r\n    createSelectField(fieldName, label, options) {\r\n        const selectField = document.createElement('div');\r\n        const selectOptions = options.map(option => `<option value=\"${option}\">${option}</option>`).join('');\r\n        selectField.innerHTML = `\r\n            <label for=\"${fieldName}\">${label}</label>\r\n            <select id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\r\n                <option value=\"\" disabled selected hidden>Оберіть ${label.toLowerCase()}</option>\r\n                ${selectOptions}\r\n            </select>\r\n        `;\r\n        this.fieldsContainer.appendChild(selectField);\r\n    }\r\n}\r\n\r\n//тестова строчка допоки не буде кнопки для створення візиту--------\r\nconst createVisit = new CreateVisitModal();\r\n//------------------------------------------------------------------\r\n//----------------------------------------------------------------------------------------\r\nclass Card {\r\n    static currentEditingCard = null;\r\n\r\n    constructor(visitData) {\r\n        this.data = visitData;\r\n        this.isEditing = false; //перевірка чи відкрита форма редагування\r\n        this.card = this.createCard();\r\n        this.visitsListSection = document.querySelector('.visits-list');\r\n        this.additionalInfoContainer = this.card.querySelector('.additionalInfoContainer');\r\n        this.btnContainer = this.card.querySelector(\".buttonsContainer\")\r\n        this.modal \r\n    }\r\n\r\n    createCard() {\r\n        const cardElement = document.createElement(\"div\");\r\n        cardElement.classList.add(\"visitCard\");\r\n        cardElement.innerHTML = `\r\n            <div class=\"visibleInfo\">\r\n                <p>ПІБ: ${this.data.fullName}</p>\r\n                <p>Лікар: ${this.data.selectedDoctor}</p>\r\n            </div>\r\n            <div class=\"additionalInfoContainer\">\r\n                ${this.renderAdditionalInfo()}\r\n            </div>\r\n            <div class=\"buttonsContainer\">\r\n                <button class=\"showMoreBtn\">Показати більше</button>\r\n                <button class=\"editBtn\">Редагувати</button>\r\n                \r\n            </div>\r\n            <button class=\"deleteIcon\">❌</button>\r\n        `;\r\n        cardElement.addEventListener('click', this.handleButtonClick.bind(this));\r\n        return cardElement;\r\n    }\r\n\r\n    renderAdditionalInfo() {\r\n        let additionalInfoHtml = '';\r\n            for (const key in this.data) {\r\n                if (key !== 'selectedDoctor' && key !== 'fullName') {\r\n                    const translatedKey = translations[key] || key;\r\n                    additionalInfoHtml += `<p>${translatedKey}: ${this.data[key]}</p>`;\r\n                }\r\n            }\r\n        return additionalInfoHtml;\r\n    }\r\n//------------------------кнопки--------------------------------------------\r\n    handleButtonClick(event) {\r\n        const target = event.target;\r\n        if (target.classList.contains('editBtn')) {\r\n            this.redactCard();\r\n        } else if (target.classList.contains('deleteIcon')) {\r\n            this.deleteCard();\r\n        } else if (target.classList.contains(\"showMoreBtn\")){\r\n            this.showCard();\r\n        }\r\n    }\r\n\r\n    deleteCard() {\r\n        this.card.remove();\r\n    }\r\n    showCard(){\r\n        const showMoreBtn = this.card.querySelector('.showMoreBtn')\r\n        this.additionalInfoContainer.classList.toggle('active');\r\n        showMoreBtn.innerText = this.additionalInfoContainer.classList.contains(\"active\") ? \"Згорнути\" : \"Показати більше\";\r\n    }\r\n    redactCard() {\r\n        if (!Card.currentEditingCard) { // перевіряємо, чи не редагується вже інша карта\r\n            Card.currentEditingCard = this; // зберігаємо посилання на поточну редаговану карту\r\n            this.additionalInfoContainer.classList.add(\"hidden\");\r\n            this.btnContainer.classList.add(\"hidden\");\r\n\r\n            this.modal = document.createElement('div');\r\n            this.modal.classList.add('modal');\r\n            this.modal.innerHTML = `\r\n                <div class=\"modal-content\">\r\n                    <h2>Редагування даних</h2>\r\n                    ${this.renderEditFields()}\r\n                    <button class=\"saveBtn\">Зберегти</button>\r\n                </div>\r\n            `;\r\n            this.card.append(this.modal)\r\n\r\n            const saveBtn = this.modal.querySelector('.saveBtn');\r\n            saveBtn.addEventListener('click', () => this.saveChanges());\r\n        }\r\n    }\r\n    renderEditFields() {\r\n        let editFieldsHtml = '';\r\n        for (const key in this.data) {\r\n            if (key !== 'selectedDoctor' && key !== 'fullName') {\r\n                const translatedKey = translations[key] || key;\r\n                if (key === 'urgency') {\r\n                    editFieldsHtml += `\r\n                        <div class=\"edit-field\">\r\n                            <label for=\"${key}\">${translatedKey}</label>\r\n                            <select id=\"${key}\">\r\n                                <option value=\"Звичайна\" ${this.data[key] === 'Звичайна' ? 'selected' : ''}>Звичайна</option>\r\n                                <option value=\"Пріоритетна\" ${this.data[key] === 'Пріоритетна' ? 'selected' : ''}>Пріоритетна</option>\r\n                                <option value=\"Невідкладна\" ${this.data[key] === 'Невідкладна' ? 'selected' : ''}>Невідкладна</option>\r\n                            </select>\r\n                        </div>\r\n                    `;\r\n                } else {\r\n                    editFieldsHtml += `\r\n                        <div class=\"edit-field\">\r\n                            <label for=\"${key}\">${translatedKey}</label>\r\n                            <input type=\"text\" id=\"${key}\" value=\"${this.data[key]}\">\r\n                        </div>\r\n                    `;\r\n                }\r\n            }\r\n        }\r\n        return editFieldsHtml;\r\n    }\r\n    saveChanges() {\r\n        const newData = {};\r\n        \r\n        for (const key in this.data) {\r\n            const inputField = document.getElementById(key);\r\n            if (inputField && inputField.value !== undefined) {\r\n                newData[key] = inputField.value;\r\n            }\r\n        }\r\n\r\n        for (const key in newData) {\r\n            if (this.data.hasOwnProperty(key)) {\r\n                this.data[key] = newData[key];\r\n            }\r\n        }\r\n        \r\n        this.modal.remove();\r\n        console.log(this.data);\r\n        this.updateAdditionalInfo();\r\n        this.additionalInfoContainer.classList.remove(\"hidden\");\r\n        this.btnContainer.classList.remove(\"hidden\");\r\n        Card.currentEditingCard = null; // позначаємо, що форма редагування закрита\r\n    }\r\n\r\n    updateAdditionalInfo() {\r\n        const newAdditionalInfoHtml = this.renderAdditionalInfo();\r\n        this.additionalInfoContainer.innerHTML = newAdditionalInfoHtml;\r\n    }\r\n\r\n\r\n//---------------------------------------------------------------------------\r\n    addToVisitsList() {\r\n        this.visitsListSection.appendChild(this.card);\r\n    }\r\n}\r\n//-----------------------------------------------------------------------------\r\n\r\nconst testObj ={ \r\n            selectedDoctor: 'Кардіолог',\r\n            purpose: 'Регулярний огляд',\r\n            description: 'Аналіз крові та артеріального тиску',\r\n            urgency: 'Пріоритетна',\r\n            fullName: 'Петренко Іван Петрович',\r\n            pressure: '120/80',\r\n            bmi: 24.5,\r\n            cardiovascularDiseases: 'Немає',\r\n            age: 35,\r\n            lastVisitDate: '2023-01-09'\r\n        }\r\nconst translations = {\r\n            doctorName: 'Лікар',\r\n            purpose: 'Мета візиту',\r\n            description: 'Короткий опис візиту',\r\n            urgency: 'Терміновість',\r\n            fullName: 'ПІБ',\r\n            pressure: 'Звичайний тиск',\r\n            bmi: 'Індекс маси тіла',\r\n            cardiovascularDiseases: 'Перенесені захворювання серцево-судинної системи',\r\n            age: 'Вік',\r\n            lastVisitDate: 'Дата останнього відвідування'\r\n};\r\n\r\n        const cardInstance = new Card(testObj);\r\n        cardInstance.addToVisitsList();\r\n\r\n        const cardInstance2 = new Card(testObj);\r\n        cardInstance2.addToVisitsList()\r\n\r\n        const cardInstance3 = new Card(testObj);\r\n        cardInstance3.addToVisitsList()"]}