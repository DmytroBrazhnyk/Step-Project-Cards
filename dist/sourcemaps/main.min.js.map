{"version":3,"sources":["01_main.js"],"names":["visitContainer","document","querySelector","loginButton","getElementById","addEventListener","Login","userToken","createCardButton","CreateVisitModal","[object Object]","classList","toggle","this","modal","createElement","add","innerHTML","body","appendChild","selectElement","fieldsContainer","handleDoctorChange","bind","selectedDoctor","value","updateAdditionalFields","createInputField","createSelectField","createBtn","innerText","createVisit","closeBtn","closeVisitModal","remove","inputs","querySelectorAll","visitData","valid","options","selectedIndex","text","forEach","input","id","type","selectValidation","inputValidation","console","log","visit","pushToServer","includes","trim","validation","isNaN","bmiValue","parseFloat","test","lower","upper","split","map","Number","fetch","method","headers","Content-Type","Authorization","JSON","stringify","then","response","ok","Error","status","json","Card","addToVisitsList","catch","error","fieldName","label","inputField","selectField","selectOptions","option","join","toLowerCase","data","isEditing","card","createCard","visitsListSection","additionalInfoContainer","btnContainer","cardInstance","cardId","cardElement","fullName","renderAdditionalInfo","handleButtonClick","additionalInfoHtml","key","translations","event","target","contains","redactCard","deleteCard","showCard","showMoreBtn","currentEditingCard","renderEditFields","append","saveChanges","editFieldsHtml","translatedKey","newData","undefined","hasOwnProperty","updateAdditionalInfo","putToServer","newAdditionalInfoHtml","createLoginModal","loginEventButton","errorElement","loginEvent","loginModal","emailInput","passwordInput","email","password","token","displayCards","clearFields","showError","hideError","message","textContent","cardData","Filter","initElements","attachListeners","visitTitleInput","urgencyFilterSelect","handleInputChange","handleSelectChange","inputValue","applyFilters","selectValue","selectedUrgency","inputDescriptionOrPurpose","urgencyValue","urgency","descriptionValue","description","purposeValue","purpose","filter","doctorName","pressure","bmi","cardiovascularDiseases","age","lastVisitDate"],"mappings":"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","file":"../js/main.min.js","sourcesContent":["const visitContainer = document.querySelector(\".visits-list\");\r\nconst loginButton = document.getElementById('header-userActions-loginButton');\r\nloginButton.addEventListener(\"click\", () => new Login());\r\nlet userToken = \"\";\r\n\r\nconst createCardButton = document.getElementById('header-userActions-createCard');\r\ncreateCardButton.addEventListener('click', () => {\r\n    let createVisit = new CreateVisitModal();\r\n});\r\n\r\nclass CreateVisitModal {\r\n    constructor() {\r\n        createCardButton.classList.toggle(\"hidden\");\r\n\r\n        this.modal = document.createElement('div');\r\n        this.modal.classList.add('creadeVisitModal');\r\n        this.modal.innerHTML = `\r\n        <div class=\"modal-content\">\r\n            <label for=\"doctorSelect\">Оберіть лікаря:</label>\r\n            <select id=\"doctorSelect\">\r\n                <option value=\"\" disabled selected hidden>Оберіть лікаря</option>\r\n                <option value=\"cardiologist\">Кардіолог</option>\r\n                <option value=\"dentist\">Стоматолог</option>\r\n                <option value=\"therapist\">Терапевт</option>\r\n            </select>\r\n            <div id=\"fieldsContainer\"></div>\r\n        </div>\r\n        `;\r\n\r\n        document.body.appendChild(this.modal);\r\n\r\n        this.selectElement = document.getElementById('doctorSelect');\r\n        this.fieldsContainer = document.getElementById('fieldsContainer');\r\n        this.selectElement.addEventListener('change', this.handleDoctorChange.bind(this));\r\n    }\r\n    handleDoctorChange() {\r\n        const selectedDoctor = this.selectElement.value;\r\n        this.updateAdditionalFields(selectedDoctor);\r\n    }\r\n    updateAdditionalFields(selectedDoctor) {\r\n\r\n        this.fieldsContainer.innerHTML = '';\r\n\r\n        this.createInputField(\"purpose\",\"Мета візиту\")\r\n        this.createInputField(\"description\",\"Короткий опис візиту\")\r\n        this.createSelectField(\"urgency\", \"Терміновість\", [\"Звичайна\", \"Пріоритетна\", \"Невідкладна\"],\"оберіть терміновість\");\r\n        this.createInputField(\"fullName\",\"ПІБ\")\r\n\r\n        if (selectedDoctor === 'cardiologist') {\r\n            this.createInputField('pressure', 'Звичайний тиск:');\r\n            this.createInputField('bmi', 'Індекс маси тіла:');\r\n            this.createInputField('cardiovascularDiseases', 'Перенесені захворювання серцево-судинної системи:');\r\n            this.createInputField('age', 'Вік:');\r\n        } else if (selectedDoctor === 'dentist') {\r\n            this.createInputField('lastVisitDate', 'Дата останнього відвідування:');\r\n        } else if (selectedDoctor === 'therapist') {\r\n            this.createInputField('age', 'Вік:');\r\n        }\r\n\r\n        const createBtn = document.createElement('button');\r\n        createBtn.innerText = 'Створити';\r\n        createBtn.addEventListener('click', () => this.createVisit());\r\n        this.fieldsContainer.appendChild(createBtn);\r\n\r\n        const closeBtn = document.createElement('button');\r\n        closeBtn.innerText = 'Закрити';\r\n        closeBtn.addEventListener('click', () => this.closeVisitModal());\r\n        this.fieldsContainer.appendChild(closeBtn);\r\n\r\n    }\r\n\r\n    closeVisitModal(){\r\n        this.modal.remove();\r\n        createCardButton.classList.toggle(\"hidden\");\r\n    }\r\n    createVisit(){\r\n        const inputs = this.fieldsContainer.querySelectorAll('.modalInput');\r\n        const visitData = {};\r\n        this.valid = true;\r\n\r\n        visitData['selectedDoctor'] = visitData['selectedDoctor'] = this.selectElement.options[this.selectElement.selectedIndex].text;;\r\n\r\n        inputs.forEach(input => {\r\n            const id = input.id;\r\n            let value;\r\n            // Отримати значення input\r\n            if (input.type === 'select-one') {\r\n                value = input.options[input.selectedIndex].value;\r\n            } else {\r\n                value = input.value;\r\n            }\r\n    \r\n            // Викликати валідацію\r\n            if (input.type === 'select-one') {\r\n                this.selectValidation(id, value);\r\n            } else {\r\n                this.inputValidation(id, value);\r\n            }\r\n            console.log(this.valid);\r\n            visitData[id] = value;\r\n        });\r\n\r\n        if(this.valid){\r\n            this.visit = visitData;\r\n            console.log(this.visit);\r\n            this.closeVisitModal();\r\n            this.pushToServer(this.visit);\r\n        }else{\r\n            console.log(\"(\");\r\n        }       \r\n    }\r\n    selectValidation(id, value) {\r\n        if (value === \"\") {\r\n            this.valid = false\r\n        }\r\n        \r\n    }\r\n    inputValidation(id,value){\r\n        const stringFields = [\r\n            \"purpose\",\r\n            \"description\",\r\n            \"fullName\",\r\n            \"cardiovascularDiseases\",\r\n            \"lastVisitDate\"\r\n        ];\r\n        if (stringFields.includes(id)) {\r\n            if (typeof value !== 'string' || value.trim() === '') {\r\n                console.log(`Поле ${id} повинно бути строкою та не може бути порожнім.`);\r\n                this.validation = false;\r\n            }\r\n        }\r\n        if (id === \"age\") {\r\n            if (isNaN(value)) {\r\n                console.log(`Поле ${id} повинно бути числом.`);\r\n                this.valid = false;\r\n            }\r\n        } else if (id === \"bmi\") {\r\n            const bmiValue = parseFloat(value);\r\n            if (isNaN(bmiValue) || bmiValue < 10 || bmiValue > 50) {\r\n                console.log(`Поле ${id} повинно бути реалістичним індексом маси тіла.`);\r\n                this.valid = false;\r\n            }\r\n        } else if (id === \"pressure\") {\r\n            const pressureRegex = /^\\d+([\\/\\\\])\\d+$/;\r\n            if (!pressureRegex.test(value)) {\r\n                console.log(`Поле ${id} повинно бути у форматі 80/120 або 80\\\\120.`);\r\n                this.valid = false;\r\n            } else {\r\n                const [lower, upper] = value.split('/').map(Number);\r\n                if (lower < 30 || upper < lower || upper > 300) {\r\n                    console.log(`Поле ${id} повинно бути в діапазоні 30-150/30-300.`);\r\n                    this.valid = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    pushToServer(visit) {\r\n        fetch(\"https://ajax.test-danit.com/api/v2/cards\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${userToken}`\r\n            },\r\n            body: JSON.stringify(visit) \r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(response => {\r\n            console.log(response)\r\n            const card = new Card(response);\r\n        card.addToVisitsList();\r\n        })\r\n        .catch(error => console.error('Помилка:', error));\r\n    }\r\n\r\n    createInputField(fieldName, label) {\r\n        const inputField = document.createElement('div');\r\n        inputField.innerHTML = `\r\n            <label for=\"${fieldName}\">${label}</label>\r\n            <input type=\"text\" id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\r\n        `;\r\n        this.fieldsContainer.appendChild(inputField);\r\n    }\r\n    createSelectField(fieldName, label, options) {\r\n        const selectField = document.createElement('div');\r\n        const selectOptions = options.map(option => `<option value=\"${option}\">${option}</option>`).join('');\r\n        selectField.innerHTML = `\r\n            <label for=\"${fieldName}\">${label}</label>\r\n            <select id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\r\n                <option value=\"\" disabled selected hidden>Оберіть ${label.toLowerCase()}</option>\r\n                ${selectOptions}\r\n            </select>\r\n        `;\r\n        this.fieldsContainer.appendChild(selectField);\r\n    }\r\n}\r\n//----------------------------------------------------------------------------------------\r\nclass Card {\r\n    static currentEditingCard = null;\r\n\r\n    constructor(visitData) {\r\n        this.data = visitData;\r\n        this.isEditing = false; //перевірка чи відкрита форма редагування\r\n        this.card = this.createCard();\r\n        this.visitsListSection = document.querySelector('.visits-list');\r\n        this.additionalInfoContainer = this.card.querySelector('.additionalInfoContainer');\r\n        this.btnContainer = this.card.querySelector(\".buttonsContainer\")\r\n        this.modal \r\n\r\n        this.card.cardInstance = this;\r\n    }\r\n\r\n    putToServer(card) {\r\n        const cardId = this.data.id;\r\n        fetch(`https://ajax.test-danit.com/api/v2/cards/${cardId}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${userToken}`\r\n            },\r\n            body: JSON.stringify(card) \r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(response => {\r\n            console.log(response)\r\n        })\r\n        .catch(error => console.error('Помилка:', error));\r\n    }\r\n\r\n    createCard() {\r\n        const cardElement = document.createElement(\"div\");\r\n        cardElement.classList.add(\"visitCard\");\r\n        cardElement.innerHTML = `\r\n            <div class=\"visibleInfo\">\r\n                <p>ПІБ: ${this.data.fullName}</p>\r\n                <p>Лікар: ${this.data.selectedDoctor}</p>\r\n            </div>\r\n            <div class=\"additionalInfoContainer\">\r\n                ${this.renderAdditionalInfo()}\r\n            </div>\r\n            <div class=\"buttonsContainer\">\r\n                <button class=\"showMoreBtn\">Показати більше</button>\r\n                <button class=\"editBtn\">Редагувати</button>\r\n            </div>\r\n            <button class=\"deleteIcon\">❌</button>\r\n        `;\r\n        cardElement.addEventListener('click', this.handleButtonClick.bind(this));\r\n        return cardElement;\r\n    }\r\n\r\n    renderAdditionalInfo() {\r\n        let additionalInfoHtml = '';\r\n            for (const key in this.data) {\r\n                if (key !== 'selectedDoctor' && key !== 'fullName' && key !== 'id') {\r\n                    const translatedKey = translations[key] || key;\r\n                    additionalInfoHtml += `<p>${translatedKey}: ${this.data[key]}</p>`;\r\n                }\r\n            }\r\n        return additionalInfoHtml;\r\n    }\r\n//------------------------кнопки--------------------------------------------\r\n    handleButtonClick(event) {\r\n        const target = event.target;\r\n        if (target.classList.contains('editBtn')) {\r\n            this.redactCard();\r\n        } else if (target.classList.contains('deleteIcon')) {\r\n            this.deleteCard();\r\n        } else if (target.classList.contains(\"showMoreBtn\")){\r\n            this.showCard();\r\n        }\r\n    }\r\n\r\n    deleteCard() {\r\n        const cardId = this.data.id;\r\n\r\n        if (cardId) {\r\n            fetch(`https://ajax.test-danit.com/api/v2/cards/${cardId}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Authorization': `Bearer ${userToken}`\r\n                },\r\n            })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(`Failed to delete card with ID ${cardId}`);\r\n                }\r\n                this.card.remove();\r\n            })\r\n            .catch(error => console.error(error));\r\n        }\r\n    }\r\n    showCard(){\r\n        const showMoreBtn = this.card.querySelector('.showMoreBtn')\r\n        this.additionalInfoContainer.classList.toggle('active');\r\n        showMoreBtn.innerText = this.additionalInfoContainer.classList.contains(\"active\") ? \"Згорнути\" : \"Показати більше\";\r\n    }\r\n    redactCard() {\r\n        if (!Card.currentEditingCard) { // перевіряємо, чи не редагується вже інша карта\r\n            Card.currentEditingCard = this; // зберігаємо посилання на поточну редаговану карту\r\n            this.additionalInfoContainer.classList.add(\"hidden\");\r\n            this.btnContainer.classList.add(\"hidden\");\r\n\r\n            this.modal = document.createElement('div');\r\n            this.modal.classList.add('modal');\r\n            this.modal.innerHTML = `\r\n                <div class=\"modal-edit-content\">\r\n                    <h2>Редагування даних</h2>\r\n                    <section>\r\n                        ${this.renderEditFields()}\r\n                    </section>\r\n                    <button class=\"saveBtn\">Зберегти</button>\r\n                </div>\r\n            `;\r\n            this.card.append(this.modal)\r\n\r\n            const saveBtn = this.modal.querySelector('.saveBtn');\r\n            saveBtn.addEventListener('click', () => this.saveChanges());\r\n        }\r\n    }\r\n    renderEditFields() {\r\n        let editFieldsHtml = '';\r\n        for (const key in this.data) {\r\n            if (key !== 'selectedDoctor' && key !== 'fullName' && key !== 'id') {\r\n                const translatedKey = translations[key] || key;\r\n                if (key === 'urgency') {\r\n                    editFieldsHtml += `\r\n                        <div class=\"edit-field\">\r\n                            <label for=\"${key}\">${translatedKey}</label>\r\n                            <select id=\"${key}\">\r\n                                <option value=\"Звичайна\" ${this.data[key] === 'Звичайна' ? 'selected' : ''}>Звичайна</option>\r\n                                <option value=\"Пріоритетна\" ${this.data[key] === 'Пріоритетна' ? 'selected' : ''}>Пріоритетна</option>\r\n                                <option value=\"Невідкладна\" ${this.data[key] === 'Невідкладна' ? 'selected' : ''}>Невідкладна</option>\r\n                            </select>\r\n                        </div>\r\n                    `;\r\n                } else {\r\n                    editFieldsHtml += `\r\n                        <div class=\"edit-field\">\r\n                            <label for=\"${key}\">${translatedKey}</label>\r\n                            <input type=\"text\" id=\"${key}\" value=\"${this.data[key]}\">\r\n                        </div>\r\n                    `;\r\n                }\r\n            }\r\n        }\r\n        return editFieldsHtml;\r\n    }\r\n    saveChanges() {\r\n        const newData = {};\r\n        \r\n        for (const key in this.data) {\r\n            const inputField = document.getElementById(key);\r\n            if (inputField && inputField.value !== undefined) {\r\n                newData[key] = inputField.value;\r\n            }\r\n        }\r\n\r\n        for (const key in newData) {\r\n            if (this.data.hasOwnProperty(key)) {\r\n                this.data[key] = newData[key];\r\n            }\r\n        }\r\n        \r\n        this.modal.remove();\r\n        console.log(this.data);\r\n        this.updateAdditionalInfo();\r\n        this.additionalInfoContainer.classList.remove(\"hidden\");\r\n        this.btnContainer.classList.remove(\"hidden\");\r\n        this.putToServer(this.data);\r\n        Card.currentEditingCard = null; // позначаємо, що форма редагування закрита\r\n    }\r\n\r\n    updateAdditionalInfo() {\r\n        const newAdditionalInfoHtml = this.renderAdditionalInfo();\r\n        this.additionalInfoContainer.innerHTML = newAdditionalInfoHtml;\r\n    }\r\n\r\n\r\n//---------------------------------------------------------------------------\r\n    addToVisitsList() {\r\n        this.visitsListSection.appendChild(this.card);\r\n    }\r\n}\r\n//-------login------------------------------------------------------------\r\nclass Login {\r\n    constructor() {\r\n        this.modal = this.createLoginModal();\r\n        document.body.append(this.modal);\r\n        this.loginButton = document.getElementById('header-userActions-loginButton');\r\n        this.loginButton.classList.add(\"hidden\");\r\n        this.loginEventButton = this.modal.querySelector(\"#loginBtn\");\r\n        this.errorElement = this.modal.querySelector(\"#error-message\"); // Додали елемент для відображення повідомлення про помилку\r\n        this.loginEventButton.addEventListener('click', () => this.loginEvent());\r\n    }\r\n\r\n    createLoginModal() {\r\n        const loginModal = document.createElement('div');\r\n        loginModal.classList.add('loginModal');\r\n        loginModal.innerHTML = `\r\n            <section>\r\n                <label for=\"email\">Email:</label>\r\n                <input type=\"email\" id=\"email\" />\r\n            </section>            \r\n            <br />\r\n            <section>\r\n                <label for=\"password\">Пароль:</label>\r\n                <input type=\"password\" id=\"password\" />\r\n            </section>\r\n            <br />\r\n            <button id=\"loginBtn\">Увійти</button>\r\n            <p id=\"error-message\" class=\"error-message\"></p> <!-- Додали елемент для відображення повідомлення про помилку -->\r\n        `;\r\n        return loginModal;\r\n    }\r\n\r\n    loginEvent() {\r\n        const emailInput = this.modal.querySelector(\"#email\");\r\n        const passwordInput = this.modal.querySelector(\"#password\");\r\n        const email = emailInput.value;\r\n        const password = passwordInput.value;\r\n\r\n        fetch(\"https://ajax.test-danit.com/api/v2/cards/login\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ email, password })\r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error('Неправильні дані');\r\n            }\r\n            return response.text();\r\n        })\r\n        .then(token => {\r\n            userToken = token;\r\n            console.log(userToken);\r\n\r\n            createCardButton.classList.add('active');\r\n            this.displayCards();\r\n\r\n            this.modal.remove();\r\n        })\r\n        .catch(error => {\r\n            console.error('Error:', error);\r\n            this.clearFields();\r\n            this.showError('Неправильні дані'); \r\n        });\r\n    }\r\n\r\n    clearFields() {\r\n        const emailInput = this.modal.querySelector(\"#email\");\r\n        const passwordInput = this.modal.querySelector(\"#password\");\r\n        emailInput.value = '';\r\n        passwordInput.value = '';\r\n        this.hideError(); \r\n    }\r\n    showError(message) {\r\n        this.errorElement.textContent = message;\r\n        this.errorElement.classList.add(\"visible\");\r\n    }\r\n    hideError() {\r\n        this.errorElement.textContent = '';\r\n        this.errorElement.classList.remove(\"visible\");\r\n    }\r\n    displayCards(){\r\n        fetch(\"https://ajax.test-danit.com/api/v2/cards\", {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': `Bearer ${userToken}`\r\n        }\r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            data.forEach(cardData => {\r\n                const card = new Card(cardData);\r\n                card.addToVisitsList();\r\n            });\r\n        })\r\n        .catch(error => console.error('Помилка:', error));\r\n            }\r\n        }\r\n\r\n//-----------------------------------------------------------------------\r\nclass Filter {\r\n    constructor() {\r\n        this.initElements();\r\n        this.attachListeners();\r\n    }\r\n    initElements() {\r\n        this.visitTitleInput = document.getElementById('visitTitle');\r\n        this.urgencyFilterSelect = document.getElementById('urgencyFilter');\r\n    }\r\n    attachListeners() {\r\n        this.visitTitleInput.addEventListener('input', this.handleInputChange.bind(this));\r\n        this.urgencyFilterSelect.addEventListener('change', this.handleSelectChange.bind(this));\r\n    }\r\n    handleInputChange(event) {\r\n        const inputValue = event.target.value;\r\n        console.log(`Input changed: ${inputValue}`);\r\n        this.applyFilters();\r\n    }\r\n    handleSelectChange(event) {\r\n        const selectValue = event.target.value;\r\n        console.log(`Select changed: ${selectValue}`);\r\n        this.applyFilters();\r\n    }\r\n    applyFilters() {\r\n        const selectedUrgency = this.urgencyFilterSelect.value;\r\n        const inputDescriptionOrPurpose = this.visitTitleInput.value.toLowerCase().trim();\r\n    \r\n        const visitCards = document.querySelectorAll('.visitCard');\r\n    \r\n        visitCards.forEach(cardElement => {\r\n            const cardInstance = cardElement.cardInstance;\r\n    \r\n            const urgencyValue = cardInstance.data.urgency;\r\n            const descriptionValue = cardInstance.data.description.toLowerCase().trim();\r\n            const purposeValue = cardInstance.data.purpose.toLowerCase().trim();\r\n            console.log(urgencyValue);\r\n            if (\r\n                (selectedUrgency === urgencyValue || selectedUrgency === \"Усі\") &&\r\n                (descriptionValue.includes(inputDescriptionOrPurpose) || purposeValue.includes(inputDescriptionOrPurpose))\r\n            ) {\r\n                cardElement.classList.remove('hidden');  \r\n            } else {\r\n                cardElement.classList.add('hidden');   \r\n            }\r\n        });\r\n    }\r\n}\r\nconst filter = new Filter();\r\nconst translations = {\r\n            doctorName: 'Лікар',\r\n            purpose: 'Мета візиту',\r\n            description: 'Короткий опис візиту',\r\n            urgency: 'Терміновість',\r\n            fullName: 'ПІБ',\r\n            pressure: 'Звичайний тиск',\r\n            bmi: 'Індекс маси тіла',\r\n            cardiovascularDiseases: 'Перенесені захворювання серцево-судинної системи',\r\n            age: 'Вік',\r\n            lastVisitDate: 'Дата останнього відвідування'\r\n};"]}