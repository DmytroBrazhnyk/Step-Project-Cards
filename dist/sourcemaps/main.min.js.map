{"version":3,"sources":["01_main.js"],"names":["visitContainer","document","querySelector","CreateVisitModal","[object Object]","this","modal","createElement","classList","add","innerHTML","body","appendChild","selectElement","getElementById","fieldsContainer","addEventListener","handleDoctorChange","bind","selectedDoctor","value","updateAdditionalFields","createInputField","createSelectField","createBtn","innerText","createVisit","closeBtn","closeVisitModal","remove","inputs","querySelectorAll","visitData","options","selectedIndex","text","forEach","input","id","type","visit","console","log","Card","addToVisitsList","fieldName","label","inputField","selectField","selectOptions","map","option","join","toLowerCase","VisitCard","data","card","createCard","visitsListSection","additionalInfoContainer","btnContainer","cardElement","fullName","renderAdditionalInfo","handleButtonClick","additionalInfoHtml","key","translations","event","target","contains","redactCard","deleteCard","showCard","showMoreBtn","toggle","renderEditFields","append","saveChanges","editFieldsHtml","translatedKey","newData","undefined","hasOwnProperty","updateAdditionalInfo","newAdditionalInfoHtml","testObj","purpose","description","urgency","pressure","bmi","cardiovascularDiseases","age","lastVisitDate","doctorName","cardInstance","cardInstance2","cardInstance3"],"mappings":"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","file":"../js/main.min.js","sourcesContent":["const visitContainer = document.querySelector(\".visits-list\");\n\nclass CreateVisitModal {\n    constructor() {\n        this.modal = document.createElement('div');\n        this.modal.classList.add('creadeVisitModal');\n        this.modal.innerHTML = `\n        <div class=\"modal-content\">\n            <label for=\"doctorSelect\">Оберіть лікаря:</label>\n            <select id=\"doctorSelect\">\n                <option value=\"\" disabled selected hidden>Оберіть лікаря</option>\n                <option value=\"cardiologist\">Кардіолог</option>\n                <option value=\"dentist\">Стоматолог</option>\n                <option value=\"therapist\">Терапевт</option>\n            </select>\n            <div id=\"fieldsContainer\"></div>\n        </div>\n        `;\n\n        document.body.appendChild(this.modal);\n\n        this.selectElement = document.getElementById('doctorSelect');\n        this.fieldsContainer = document.getElementById('fieldsContainer');\n        this.selectElement.addEventListener('change', this.handleDoctorChange.bind(this));\n    }\n    handleDoctorChange() {\n        const selectedDoctor = this.selectElement.value;\n        this.updateAdditionalFields(selectedDoctor);\n    }\n    updateAdditionalFields(selectedDoctor) {\n\n        this.fieldsContainer.innerHTML = '';\n\n        this.createInputField(\"purpose\",\"Мета візиту\")\n        this.createInputField(\"description\",\"Короткий опис візиту\")\n        this.createSelectField(\"urgency\", \"Терміновість\", [\"Звичайна\", \"Пріоритетна\", \"Невідкладна\"],\"оберіть терміновість\");\n        this.createInputField(\"fullName\",\"ПІБ\")\n\n        if (selectedDoctor === 'cardiologist') {\n            this.createInputField('pressure', 'Звичайний тиск:');\n            this.createInputField('bmi', 'Індекс маси тіла:');\n            this.createInputField('cardiovascularDiseases', 'Перенесені захворювання серцево-судинної системи:');\n            this.createInputField('age', 'Вік:');\n        } else if (selectedDoctor === 'dentist') {\n            this.createInputField('lastVisitDate', 'Дата останнього відвідування:');\n        } else if (selectedDoctor === 'therapist') {\n            this.createInputField('age', 'Вік:');\n        }\n\n        const createBtn = document.createElement('button');\n        createBtn.innerText = 'Створити';\n        createBtn.addEventListener('click', () => this.createVisit());\n        this.fieldsContainer.appendChild(createBtn);\n\n        const closeBtn = document.createElement('button');\n        closeBtn.innerText = 'Закрити';\n        closeBtn.addEventListener('click', () => this.closeVisitModal());\n        this.fieldsContainer.appendChild(closeBtn);\n\n    }\n\n    closeVisitModal(){\n        this.modal.remove();\n    }\n    createVisit(){\n        const inputs = this.fieldsContainer.querySelectorAll('.modalInput');\n        const visitData = {};\n\n        visitData['selectedDoctor'] = visitData['selectedDoctor'] = this.selectElement.options[this.selectElement.selectedIndex].text;;\n\n        inputs.forEach(input => {\n            const id = input.id;\n            const value = input.type === 'select-one' ? input.options[input.selectedIndex].value : input.value;\n            visitData[id] = value;\n        });\n\n        this.visit = visitData;\n        \n        console.log(createVisit.visit);\n        this.closeVisitModal();\n        //виклик функції для створення картки та відправлення на сервер------\n        const card = new Card(createVisit.visit);\n        card.addToVisitsList();\n        //-------------------------------------------------------------------\n    }\n\n    createInputField(fieldName, label) {\n        const inputField = document.createElement('div');\n        inputField.innerHTML = `\n            <label for=\"${fieldName}\">${label}</label>\n            <input type=\"text\" id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\n        `;\n        this.fieldsContainer.appendChild(inputField);\n    }\n    createSelectField(fieldName, label, options) {\n        const selectField = document.createElement('div');\n        const selectOptions = options.map(option => `<option value=\"${option}\">${option}</option>`).join('');\n        selectField.innerHTML = `\n            <label for=\"${fieldName}\">${label}</label>\n            <select id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\n                <option value=\"\" disabled selected hidden>Оберіть ${label.toLowerCase()}</option>\n                ${selectOptions}\n            </select>\n        `;\n        this.fieldsContainer.appendChild(selectField);\n    }\n}\n\n//тестова строчка допоки не буде кнопки для створення візиту--------\nconst createVisit = new CreateVisitModal();\n//------------------------------------------------------------------\n\n// картка візиту\nclass VisitCard {\n    constructor(visitData) {\n        this.data = visitData;\n        this.card = this.createCard();\n        this.visitsListSection = document.querySelector('.visits-list');\n        this.additionalInfoContainer = this.card.querySelector('.additionalInfoContainer');\n        this.btnContainer = this.card.querySelector(\".buttonsContainer\")\n        this.modal \n    }\n\n    createCard() {\n        const cardElement = document.createElement(\"div\");\n        cardElement.classList.add(\"visitCard\");\n        cardElement.innerHTML = `\n            <div class=\"visibleInfo\">\n                <p>ПІБ: ${this.data.fullName}</p>\n                <p>Лікар: ${this.data.selectedDoctor}</p>\n            </div>\n            <div class=\"additionalInfoContainer\">\n                ${this.renderAdditionalInfo()}\n            </div>\n            <div class=\"buttonsContainer\">\n                <button class=\"showMoreBtn\">Показати більше</button>\n                <button class=\"editBtn\">Редагувати</button>\n                <button class=\"deleteIcon\">❌</button>\n            </div>\n        `;\n        cardElement.addEventListener('click', this.handleButtonClick.bind(this));\n        return cardElement;\n    }\n\n    renderAdditionalInfo() {\n        let additionalInfoHtml = '';\n            for (const key in this.data) {\n                if (key !== 'selectedDoctor' && key !== 'fullName') {\n                    const translatedKey = translations[key] || key;\n                    additionalInfoHtml += `<p>${translatedKey}: ${this.data[key]}</p>`;\n                }\n            }\n        return additionalInfoHtml;\n    }\n//------------------------кнопки--------------------------------------------\n    handleButtonClick(event) {\n        const target = event.target;\n        if (target.classList.contains('editBtn')) {\n            this.redactCard();\n        } else if (target.classList.contains('deleteIcon')) {\n            this.deleteCard();\n        } else if (target.classList.contains(\"showMoreBtn\")){\n            this.showCard();\n        }\n    }\n\n    deleteCard() {\n        this.card.remove();\n    }\n    showCard(){\n        const showMoreBtn = this.card.querySelector('.showMoreBtn')\n        this.additionalInfoContainer.classList.toggle('active');\n        showMoreBtn.innerText = this.additionalInfoContainer.classList.contains(\"active\") ? \"Згорнути\" : \"Показати більше\";\n    }\n    redactCard() {\n        this.additionalInfoContainer.classList.add(\"hidden\");\n        this.btnContainer.classList.add(\"hidden\");\n\n        this.modal = document.createElement('div');\n        this.modal.classList.add('modal');\n        this.modal.innerHTML = `\n            <div class=\"modal-content\">\n                <h2>Редагування даних</h2>\n                ${this.renderEditFields()}\n                <button class=\"saveBtn\">Зберегти</button>\n            </div>\n        `;\n        this.card.append(this.modal)\n\n        const saveBtn = this.modal.querySelector('.saveBtn');\n        saveBtn.addEventListener('click', () => this.saveChanges());\n    }\n    renderEditFields() {\n        let editFieldsHtml = '';\n        for (const key in this.data) {\n            if (key !== 'selectedDoctor' && key !== 'fullName') {\n                const translatedKey = translations[key] || key;\n                if (key === 'urgency') {\n                    editFieldsHtml += `\n                        <div class=\"edit-field\">\n                            <label for=\"${key}\">${translatedKey}</label>\n                            <select id=\"${key}\">\n                                <option value=\"Звичайна\" ${this.data[key] === 'Звичайна' ? 'selected' : ''}>Звичайна</option>\n                                <option value=\"Пріоритетна\" ${this.data[key] === 'Пріоритетна' ? 'selected' : ''}>Пріоритетна</option>\n                                <option value=\"Невідкладна\" ${this.data[key] === 'Невідкладна' ? 'selected' : ''}>Невідкладна</option>\n                            </select>\n                        </div>\n                    `;\n                } else {\n                    editFieldsHtml += `\n                        <div class=\"edit-field\">\n                            <label for=\"${key}\">${translatedKey}</label>\n                            <input type=\"text\" id=\"${key}\" value=\"${this.data[key]}\">\n                        </div>\n                    `;\n                }\n            }\n        }\n        return editFieldsHtml;\n    }\n    saveChanges() {\n        const newData = {};\n        \n        for (const key in this.data) {\n            const inputField = document.getElementById(key);\n            if (inputField && inputField.value !== undefined) {\n                newData[key] = inputField.value;\n            }\n        }\n\n        for (const key in newData) {\n            if (this.data.hasOwnProperty(key)) {\n                this.data[key] = newData[key];\n            }\n        }\n        \n        this.modal.remove();\n        console.log(this.data);\n        this.updateAdditionalInfo();\n        this.additionalInfoContainer.classList.remove(\"hidden\");\n        this.btnContainer.classList.remove(\"hidden\");\n    }\n\n    updateAdditionalInfo() {\n        const newAdditionalInfoHtml = this.renderAdditionalInfo();\n        this.additionalInfoContainer.innerHTML = newAdditionalInfoHtml;\n    }\n\n\n//---------------------------------------------------------------------------\n    addToVisitsList() {\n        this.visitsListSection.appendChild(this.card);\n    }\n}\n//-----------------------------------------------------------------------------\n\nconst testObj ={ \n            selectedDoctor: 'Кардіолог',\n            purpose: 'Регулярний огляд',\n            description: 'Аналіз крові та артеріального тиску',\n            urgency: 'Пріоритетна',\n            fullName: 'Петренко Іван Петрович',\n            pressure: '120/80',\n            bmi: 24.5,\n            cardiovascularDiseases: 'Немає',\n            age: 35,\n            lastVisitDate: '2023-01-09'\n        }\nconst translations = {\n            doctorName: 'Лікар',\n            purpose: 'Мета візиту',\n            description: 'Короткий опис візиту',\n            urgency: 'Терміновість',\n            fullName: 'ПІБ',\n            pressure: 'Звичайний тиск',\n            bmi: 'Індекс маси тіла',\n            cardiovascularDiseases: 'Перенесені захворювання серцево-судинної системи',\n            age: 'Вік',\n            lastVisitDate: 'Дата останнього відвідування'\n};\n\n        const cardInstance = new Card(testObj);\n        cardInstance.addToVisitsList();\n\n        const cardInstance2 = new Card(testObj);\n        cardInstance2.addToVisitsList()\n\n        const cardInstance3 = new Card(testObj);\n        cardInstance3.addToVisitsList()"]}