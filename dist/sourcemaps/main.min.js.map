{"version":3,"sources":["01_main.js"],"names":["visitContainer","document","querySelector","loginButton","getElementById","addEventListener","Login","userToken","createCardButton","CreateVisitModal","[object Object]","this","modal","createElement","classList","add","innerHTML","body","appendChild","selectElement","fieldsContainer","handleDoctorChange","bind","selectedDoctor","value","updateAdditionalFields","createInputField","createSelectField","createBtn","innerText","createVisit","closeBtn","closeVisitModal","remove","inputs","querySelectorAll","visitData","options","selectedIndex","text","forEach","input","id","type","visit","console","log","Card","addToVisitsList","fieldName","label","inputField","selectField","selectOptions","map","option","join","toLowerCase","data","card","createCard","visitsListSection","additionalInfoContainer","btnContainer","cardElement","fullName","renderAdditionalInfo","handleButtonClick","additionalInfoHtml","key","translations","event","target","contains","redactCard","deleteCard","showCard","showMoreBtn","toggle","renderEditFields","append","saveChanges","editFieldsHtml","translatedKey","newData","undefined","hasOwnProperty","updateAdditionalInfo","newAdditionalInfoHtml","createLoginModal","loginEventButton","errorElement","loginEvent","loginModal","emailInput","passwordInput","email","password","fetch","method","headers","Content-Type","JSON","stringify","then","response","ok","Error","token","catch","error","clearFields","showError","hideError","message","textContent","testObj","purpose","description","urgency","pressure","bmi","cardiovascularDiseases","age","lastVisitDate","doctorName","cardInstance","cardInstance2","cardInstance3"],"mappings":"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","file":"../js/main.min.js","sourcesContent":["const visitContainer = document.querySelector(\".visits-list\");\nconst loginButton = document.getElementById('header-userActions-loginButton');\nloginButton.addEventListener(\"click\", () => new Login());\nlet userToken = \"\";\n\n\nconst createCardButton = document.getElementById('header-userActions-createCard');\ncreateCardButton.addEventListener('click', () => {\n    let createVisit = new CreateVisitModal();\n});\n\n\nclass CreateVisitModal {\n    constructor() {\n        this.modal = document.createElement('div');\n        this.modal.classList.add('creadeVisitModal');\n        this.modal.innerHTML = `\n        <div class=\"modal-content\">\n            <label for=\"doctorSelect\">Оберіть лікаря:</label>\n            <select id=\"doctorSelect\">\n                <option value=\"\" disabled selected hidden>Оберіть лікаря</option>\n                <option value=\"cardiologist\">Кардіолог</option>\n                <option value=\"dentist\">Стоматолог</option>\n                <option value=\"therapist\">Терапевт</option>\n            </select>\n            <div id=\"fieldsContainer\"></div>\n        </div>\n        `;\n\n        document.body.appendChild(this.modal);\n\n        this.selectElement = document.getElementById('doctorSelect');\n        this.fieldsContainer = document.getElementById('fieldsContainer');\n        this.selectElement.addEventListener('change', this.handleDoctorChange.bind(this));\n    }\n    handleDoctorChange() {\n        const selectedDoctor = this.selectElement.value;\n        this.updateAdditionalFields(selectedDoctor);\n    }\n    updateAdditionalFields(selectedDoctor) {\n\n        this.fieldsContainer.innerHTML = '';\n\n        this.createInputField(\"purpose\",\"Мета візиту\")\n        this.createInputField(\"description\",\"Короткий опис візиту\")\n        this.createSelectField(\"urgency\", \"Терміновість\", [\"Звичайна\", \"Пріоритетна\", \"Невідкладна\"],\"оберіть терміновість\");\n        this.createInputField(\"fullName\",\"ПІБ\")\n\n        if (selectedDoctor === 'cardiologist') {\n            this.createInputField('pressure', 'Звичайний тиск:');\n            this.createInputField('bmi', 'Індекс маси тіла:');\n            this.createInputField('cardiovascularDiseases', 'Перенесені захворювання серцево-судинної системи:');\n            this.createInputField('age', 'Вік:');\n        } else if (selectedDoctor === 'dentist') {\n            this.createInputField('lastVisitDate', 'Дата останнього відвідування:');\n        } else if (selectedDoctor === 'therapist') {\n            this.createInputField('age', 'Вік:');\n        }\n\n        const createBtn = document.createElement('button');\n        createBtn.innerText = 'Створити';\n        createBtn.addEventListener('click', () => this.createVisit());\n        this.fieldsContainer.appendChild(createBtn);\n\n        const closeBtn = document.createElement('button');\n        closeBtn.innerText = 'Закрити';\n        closeBtn.addEventListener('click', () => this.closeVisitModal());\n        this.fieldsContainer.appendChild(closeBtn);\n\n    }\n\n    closeVisitModal(){\n        this.modal.remove();\n    }\n    createVisit(){\n        const inputs = this.fieldsContainer.querySelectorAll('.modalInput');\n        const visitData = {};\n\n        visitData['selectedDoctor'] = visitData['selectedDoctor'] = this.selectElement.options[this.selectElement.selectedIndex].text;;\n\n        inputs.forEach(input => {\n            const id = input.id;\n            const value = input.type === 'select-one' ? input.options[input.selectedIndex].value : input.value;\n            visitData[id] = value;\n        });\n\n        this.visit = visitData;\n        console.log(this.visit);\n\n        this.closeVisitModal();\n\n        const card = new Card(this.visit);\n        card.addToVisitsList();\n        // треба додати відправлення на сервер \n    }\n\n    createInputField(fieldName, label) {\n        const inputField = document.createElement('div');\n        inputField.innerHTML = `\n            <label for=\"${fieldName}\">${label}</label>\n            <input type=\"text\" id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\n        `;\n        this.fieldsContainer.appendChild(inputField);\n    }\n    createSelectField(fieldName, label, options) {\n        const selectField = document.createElement('div');\n        const selectOptions = options.map(option => `<option value=\"${option}\">${option}</option>`).join('');\n        selectField.innerHTML = `\n            <label for=\"${fieldName}\">${label}</label>\n            <select id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\n                <option value=\"\" disabled selected hidden>Оберіть ${label.toLowerCase()}</option>\n                ${selectOptions}\n            </select>\n        `;\n        this.fieldsContainer.appendChild(selectField);\n    }\n}\n//тестова строчка допоки не буде кнопки для створення візиту--------\n// const createVisit = new CreateVisitModal();\n//----------------------------------------------------------------------------------------\nclass Card {\n    constructor(visitData) {\n        this.data = visitData;\n        this.card = this.createCard();\n        this.visitsListSection = document.querySelector('.visits-list');\n        this.additionalInfoContainer = this.card.querySelector('.additionalInfoContainer');\n        this.btnContainer = this.card.querySelector(\".buttonsContainer\")\n        this.modal \n    }\n\n    createCard() {\n        const cardElement = document.createElement(\"div\");\n        cardElement.classList.add(\"visitCard\");\n        cardElement.innerHTML = `\n            <div class=\"visibleInfo\">\n                <p>ПІБ: ${this.data.fullName}</p>\n                <p>Лікар: ${this.data.selectedDoctor}</p>\n            </div>\n            <div class=\"additionalInfoContainer\">\n                ${this.renderAdditionalInfo()}\n            </div>\n            <div class=\"buttonsContainer\">\n                <button class=\"showMoreBtn\">Показати більше</button>\n                <button class=\"editBtn\">Редагувати</button>\n                <button class=\"deleteIcon\">❌</button>\n            </div>\n        `;\n        cardElement.addEventListener('click', this.handleButtonClick.bind(this));\n        return cardElement;\n    }\n\n    renderAdditionalInfo() {\n        let additionalInfoHtml = '';\n            for (const key in this.data) {\n                if (key !== 'selectedDoctor' && key !== 'fullName') {\n                    const translatedKey = translations[key] || key;\n                    additionalInfoHtml += `<p>${translatedKey}: ${this.data[key]}</p>`;\n                }\n            }\n        return additionalInfoHtml;\n    }\n//------------------------кнопки--------------------------------------------\n    handleButtonClick(event) {\n        const target = event.target;\n        if (target.classList.contains('editBtn')) {\n            this.redactCard();\n        } else if (target.classList.contains('deleteIcon')) {\n            this.deleteCard();\n        } else if (target.classList.contains(\"showMoreBtn\")){\n            this.showCard();\n        }\n    }\n\n    deleteCard() {\n        this.card.remove();\n    }\n    showCard(){\n        const showMoreBtn = this.card.querySelector('.showMoreBtn')\n        this.additionalInfoContainer.classList.toggle('active');\n        showMoreBtn.innerText = this.additionalInfoContainer.classList.contains(\"active\") ? \"Згорнути\" : \"Показати більше\";\n    }\n    redactCard() {\n        this.additionalInfoContainer.classList.add(\"hidden\");\n        this.btnContainer.classList.add(\"hidden\");\n\n        this.modal = document.createElement('div');\n        this.modal.classList.add('modal');\n        this.modal.innerHTML = `\n            <div class=\"modal-content\">\n                <h2>Редагування даних</h2>\n                ${this.renderEditFields()}\n                <button class=\"saveBtn\">Зберегти</button>\n            </div>\n        `;\n        this.card.append(this.modal)\n\n        const saveBtn = this.modal.querySelector('.saveBtn');\n        saveBtn.addEventListener('click', () => this.saveChanges());\n    }\n    renderEditFields() {\n        let editFieldsHtml = '';\n        for (const key in this.data) {\n            if (key !== 'selectedDoctor' && key !== 'fullName') {\n                const translatedKey = translations[key] || key;\n                if (key === 'urgency') {\n                    editFieldsHtml += `\n                        <div class=\"edit-field\">\n                            <label for=\"${key}\">${translatedKey}</label>\n                            <select id=\"${key}\">\n                                <option value=\"Звичайна\" ${this.data[key] === 'Звичайна' ? 'selected' : ''}>Звичайна</option>\n                                <option value=\"Пріоритетна\" ${this.data[key] === 'Пріоритетна' ? 'selected' : ''}>Пріоритетна</option>\n                                <option value=\"Невідкладна\" ${this.data[key] === 'Невідкладна' ? 'selected' : ''}>Невідкладна</option>\n                            </select>\n                        </div>\n                    `;\n                } else {\n                    editFieldsHtml += `\n                        <div class=\"edit-field\">\n                            <label for=\"${key}\">${translatedKey}</label>\n                            <input type=\"text\" id=\"${key}\" value=\"${this.data[key]}\">\n                        </div>\n                    `;\n                }\n            }\n        }\n        return editFieldsHtml;\n    }\n    saveChanges() {\n        const newData = {};\n        \n        for (const key in this.data) {\n            const inputField = document.getElementById(key);\n            if (inputField && inputField.value !== undefined) {\n                newData[key] = inputField.value;\n            }\n        }\n\n        for (const key in newData) {\n            if (this.data.hasOwnProperty(key)) {\n                this.data[key] = newData[key];\n            }\n        }\n        \n        this.modal.remove();\n        console.log(this.data);\n        this.updateAdditionalInfo();\n        this.additionalInfoContainer.classList.remove(\"hidden\");\n        this.btnContainer.classList.remove(\"hidden\");\n    }\n\n    updateAdditionalInfo() {\n        const newAdditionalInfoHtml = this.renderAdditionalInfo();\n        this.additionalInfoContainer.innerHTML = newAdditionalInfoHtml;\n    }\n\n\n//---------------------------------------------------------------------------\n    addToVisitsList() {\n        this.visitsListSection.appendChild(this.card);\n    }\n}\n//-------login------------------------------------------------------------\nclass Login {\n    constructor() {\n        this.modal = this.createLoginModal();\n        document.body.append(this.modal);\n        this.loginButton = document.getElementById('header-userActions-loginButton');\n        this.loginButton.classList.add(\"hidden\");\n        this.loginEventButton = this.modal.querySelector(\"#loginBtn\");\n        this.errorElement = this.modal.querySelector(\"#error-message\"); // Додали елемент для відображення повідомлення про помилку\n        this.loginEventButton.addEventListener('click', () => this.loginEvent());\n    }\n\n    createLoginModal() {\n        const loginModal = document.createElement('div');\n        loginModal.classList.add('loginModal');\n        loginModal.innerHTML = `\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" />\n            <br />\n            <label for=\"password\">Пароль:</label>\n            <input type=\"password\" id=\"password\" />\n            <br />\n            <button id=\"loginBtn\">Увійти</button>\n            <p id=\"error-message\" class=\"error-message\"></p> <!-- Додали елемент для відображення повідомлення про помилку -->\n        `;\n        return loginModal;\n    }\n\n    loginEvent() {\n        const emailInput = this.modal.querySelector(\"#email\");\n        const passwordInput = this.modal.querySelector(\"#password\");\n        const email = emailInput.value;\n        const password = passwordInput.value;\n\n        fetch(\"https://ajax.test-danit.com/api/v2/cards/login\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ email, password })\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Неправильні дані');\n            }\n            return response.text();\n        })\n        .then(token => {\n            userToken = token;\n            console.log(userToken);\n\n            createCardButton.classList.add('active');\n\n            this.modal.remove();\n        })\n        .catch(error => {\n            console.error('Error:', error);\n            this.clearFields();\n            this.showError('Неправильні дані'); // Вивести повідомлення про помилку\n        });\n    }\n\n    clearFields() {\n        const emailInput = this.modal.querySelector(\"#email\");\n        const passwordInput = this.modal.querySelector(\"#password\");\n        emailInput.value = '';\n        passwordInput.value = '';\n        this.hideError(); \n    }\n    showError(message) {\n        this.errorElement.textContent = message;\n        this.errorElement.classList.add(\"visible\");\n    }\n    hideError() {\n        this.errorElement.textContent = '';\n        this.errorElement.classList.remove(\"visible\");\n    }\n    displayCards(){\n\n    }\n}\n\n//-----------------------------------------------------------------------\n\nconst testObj ={ \n            selectedDoctor: 'Кардіолог',\n            purpose: 'Регулярний огляд',\n            description: 'Аналіз крові та артеріального тиску',\n            urgency: 'Пріоритетна',\n            fullName: 'Петренко Іван Петрович',\n            pressure: '120/80',\n            bmi: 24.5,\n            cardiovascularDiseases: 'Немає',\n            age: 35,\n            lastVisitDate: '2023-01-09'\n        }\nconst translations = {\n            doctorName: 'Лікар',\n            purpose: 'Мета візиту',\n            description: 'Короткий опис візиту',\n            urgency: 'Терміновість',\n            fullName: 'ПІБ',\n            pressure: 'Звичайний тиск',\n            bmi: 'Індекс маси тіла',\n            cardiovascularDiseases: 'Перенесені захворювання серцево-судинної системи',\n            age: 'Вік',\n            lastVisitDate: 'Дата останнього відвідування'\n};\n\n        const cardInstance = new Card(testObj);\n        cardInstance.addToVisitsList();\n\n        const cardInstance2 = new Card(testObj);\n        cardInstance2.addToVisitsList()\n\n        const cardInstance3 = new Card(testObj);\n        cardInstance3.addToVisitsList()"]}