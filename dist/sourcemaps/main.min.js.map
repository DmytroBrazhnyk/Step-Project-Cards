{"version":3,"sources":["01_main.js"],"names":["visitContainer","document","querySelector","loginButton","getElementById","addEventListener","Login","userToken","createCardButton","CreateVisitModal","[object Object]","classList","toggle","this","modal","createElement","add","innerHTML","body","appendChild","selectElement","fieldsContainer","handleDoctorChange","bind","selectedDoctor","value","updateAdditionalFields","createInputField","createSelectField","createBtn","innerText","createVisit","closeBtn","closeVisitModal","remove","inputs","querySelectorAll","visitData","options","selectedIndex","text","forEach","input","id","type","visit","console","log","pushToServer","fetch","method","headers","Content-Type","Authorization","JSON","stringify","then","response","ok","Error","status","json","Card","addToVisitsList","catch","error","fieldName","label","inputField","selectField","selectOptions","map","option","join","toLowerCase","data","card","createCard","visitsListSection","additionalInfoContainer","btnContainer","cardElement","fullName","renderAdditionalInfo","handleButtonClick","additionalInfoHtml","key","translations","event","target","contains","redactCard","deleteCard","showCard","showMoreBtn","renderEditFields","append","saveChanges","editFieldsHtml","translatedKey","newData","undefined","hasOwnProperty","updateAdditionalInfo","newAdditionalInfoHtml","createLoginModal","loginEventButton","errorElement","loginEvent","loginModal","emailInput","passwordInput","email","password","token","clearFields","showError","hideError","message","textContent","doctorName","purpose","description","urgency","pressure","bmi","cardiovascularDiseases","age","lastVisitDate"],"mappings":"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","file":"../js/main.min.js","sourcesContent":["const visitContainer = document.querySelector(\".visits-list\");\nconst loginButton = document.getElementById('header-userActions-loginButton');\nloginButton.addEventListener(\"click\", () => new Login());\nlet userToken = \"\";\n\n\nconst createCardButton = document.getElementById('header-userActions-createCard');\ncreateCardButton.addEventListener('click', () => {\n    let createVisit = new CreateVisitModal();\n});\n\n\nclass CreateVisitModal {\n    constructor() {\n        createCardButton.classList.toggle(\"hidden\");\n\n        this.modal = document.createElement('div');\n        this.modal.classList.add('creadeVisitModal');\n        this.modal.innerHTML = `\n        <div class=\"modal-content\">\n            <label for=\"doctorSelect\">Оберіть лікаря:</label>\n            <select id=\"doctorSelect\">\n                <option value=\"\" disabled selected hidden>Оберіть лікаря</option>\n                <option value=\"cardiologist\">Кардіолог</option>\n                <option value=\"dentist\">Стоматолог</option>\n                <option value=\"therapist\">Терапевт</option>\n            </select>\n            <div id=\"fieldsContainer\"></div>\n        </div>\n        `;\n\n        document.body.appendChild(this.modal);\n\n        this.selectElement = document.getElementById('doctorSelect');\n        this.fieldsContainer = document.getElementById('fieldsContainer');\n        this.selectElement.addEventListener('change', this.handleDoctorChange.bind(this));\n    }\n    handleDoctorChange() {\n        const selectedDoctor = this.selectElement.value;\n        this.updateAdditionalFields(selectedDoctor);\n    }\n    updateAdditionalFields(selectedDoctor) {\n\n        this.fieldsContainer.innerHTML = '';\n\n        this.createInputField(\"purpose\",\"Мета візиту\")\n        this.createInputField(\"description\",\"Короткий опис візиту\")\n        this.createSelectField(\"urgency\", \"Терміновість\", [\"Звичайна\", \"Пріоритетна\", \"Невідкладна\"],\"оберіть терміновість\");\n        this.createInputField(\"fullName\",\"ПІБ\")\n\n        if (selectedDoctor === 'cardiologist') {\n            this.createInputField('pressure', 'Звичайний тиск:');\n            this.createInputField('bmi', 'Індекс маси тіла:');\n            this.createInputField('cardiovascularDiseases', 'Перенесені захворювання серцево-судинної системи:');\n            this.createInputField('age', 'Вік:');\n        } else if (selectedDoctor === 'dentist') {\n            this.createInputField('lastVisitDate', 'Дата останнього відвідування:');\n        } else if (selectedDoctor === 'therapist') {\n            this.createInputField('age', 'Вік:');\n        }\n\n        const createBtn = document.createElement('button');\n        createBtn.innerText = 'Створити';\n        createBtn.addEventListener('click', () => this.createVisit());\n        this.fieldsContainer.appendChild(createBtn);\n\n        const closeBtn = document.createElement('button');\n        closeBtn.innerText = 'Закрити';\n        closeBtn.addEventListener('click', () => this.closeVisitModal());\n        this.fieldsContainer.appendChild(closeBtn);\n\n    }\n\n    closeVisitModal(){\n        this.modal.remove();\n        createCardButton.classList.toggle(\"hidden\");\n    }\n    createVisit(){\n        const inputs = this.fieldsContainer.querySelectorAll('.modalInput');\n        const visitData = {};\n\n        visitData['selectedDoctor'] = visitData['selectedDoctor'] = this.selectElement.options[this.selectElement.selectedIndex].text;;\n\n        inputs.forEach(input => {\n            const id = input.id;\n            const value = input.type === 'select-one' ? input.options[input.selectedIndex].value : input.value;\n            visitData[id] = value;\n        });\n\n        this.visit = visitData;\n        console.log(this.visit);\n\n        this.closeVisitModal();\n\n        this.pushToServer(this.visit);\n    }\n\n    pushToServer(visit) {\n        fetch(\"https://ajax.test-danit.com/api/v2/cards\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${userToken}`\n            },\n            body: JSON.stringify(visit) \n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(response => {\n            console.log(response)\n            const card = new Card(response);\n        card.addToVisitsList();\n        })\n        .catch(error => console.error('Помилка:', error));\n    }\n\n    createInputField(fieldName, label) {\n        const inputField = document.createElement('div');\n        inputField.innerHTML = `\n            <label for=\"${fieldName}\">${label}</label>\n            <input type=\"text\" id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\n        `;\n        this.fieldsContainer.appendChild(inputField);\n    }\n    createSelectField(fieldName, label, options) {\n        const selectField = document.createElement('div');\n        const selectOptions = options.map(option => `<option value=\"${option}\">${option}</option>`).join('');\n        selectField.innerHTML = `\n            <label for=\"${fieldName}\">${label}</label>\n            <select id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\n                <option value=\"\" disabled selected hidden>Оберіть ${label.toLowerCase()}</option>\n                ${selectOptions}\n            </select>\n        `;\n        this.fieldsContainer.appendChild(selectField);\n    }\n}\n//треба доробити відправку картки на сервер\n// \n//----------------------------------------------------------------------------------------\nclass Card {\n    constructor(visitData) {\n        this.data = visitData;\n        this.card = this.createCard();\n        this.visitsListSection = document.querySelector('.visits-list');\n        this.additionalInfoContainer = this.card.querySelector('.additionalInfoContainer');\n        this.btnContainer = this.card.querySelector(\".buttonsContainer\")\n        this.modal \n    }\n\n    createCard() {\n        const cardElement = document.createElement(\"div\");\n        cardElement.classList.add(\"visitCard\");\n        cardElement.innerHTML = `\n            <div class=\"visibleInfo\">\n                <p>ПІБ: ${this.data.fullName}</p>\n                <p>Лікар: ${this.data.selectedDoctor}</p>\n            </div>\n            <div class=\"additionalInfoContainer\">\n                ${this.renderAdditionalInfo()}\n            </div>\n            <div class=\"buttonsContainer\">\n                <button class=\"showMoreBtn\">Показати більше</button>\n                <button class=\"editBtn\">Редагувати</button>\n                <button class=\"deleteIcon\">❌</button>\n            </div>\n        `;\n        cardElement.addEventListener('click', this.handleButtonClick.bind(this));\n        return cardElement;\n    }\n\n    renderAdditionalInfo() {\n        let additionalInfoHtml = '';\n            for (const key in this.data) {\n                if (key !== 'selectedDoctor' && key !== 'fullName') {\n                    const translatedKey = translations[key] || key;\n                    additionalInfoHtml += `<p>${translatedKey}: ${this.data[key]}</p>`;\n                }\n            }\n        return additionalInfoHtml;\n    }\n//------------------------кнопки--------------------------------------------\n    handleButtonClick(event) {\n        const target = event.target;\n        if (target.classList.contains('editBtn')) {\n            this.redactCard();\n        } else if (target.classList.contains('deleteIcon')) {\n            this.deleteCard();\n        } else if (target.classList.contains(\"showMoreBtn\")){\n            this.showCard();\n        }\n    }\n\n    deleteCard() {\n        this.card.remove();\n    }\n    showCard(){\n        const showMoreBtn = this.card.querySelector('.showMoreBtn')\n        this.additionalInfoContainer.classList.toggle('active');\n        showMoreBtn.innerText = this.additionalInfoContainer.classList.contains(\"active\") ? \"Згорнути\" : \"Показати більше\";\n    }\n    redactCard() {\n        this.additionalInfoContainer.classList.add(\"hidden\");\n        this.btnContainer.classList.add(\"hidden\");\n\n        this.modal = document.createElement('div');\n        this.modal.classList.add('modal');\n        this.modal.innerHTML = `\n            <div class=\"modal-content\">\n                <h2>Редагування даних</h2>\n                ${this.renderEditFields()}\n                <button class=\"saveBtn\">Зберегти</button>\n            </div>\n        `;\n        this.card.append(this.modal)\n\n        const saveBtn = this.modal.querySelector('.saveBtn');\n        saveBtn.addEventListener('click', () => this.saveChanges());\n    }\n    renderEditFields() {\n        let editFieldsHtml = '';\n        for (const key in this.data) {\n            if (key !== 'selectedDoctor' && key !== 'fullName') {\n                const translatedKey = translations[key] || key;\n                if (key === 'urgency') {\n                    editFieldsHtml += `\n                        <div class=\"edit-field\">\n                            <label for=\"${key}\">${translatedKey}</label>\n                            <select id=\"${key}\">\n                                <option value=\"Звичайна\" ${this.data[key] === 'Звичайна' ? 'selected' : ''}>Звичайна</option>\n                                <option value=\"Пріоритетна\" ${this.data[key] === 'Пріоритетна' ? 'selected' : ''}>Пріоритетна</option>\n                                <option value=\"Невідкладна\" ${this.data[key] === 'Невідкладна' ? 'selected' : ''}>Невідкладна</option>\n                            </select>\n                        </div>\n                    `;\n                } else {\n                    editFieldsHtml += `\n                        <div class=\"edit-field\">\n                            <label for=\"${key}\">${translatedKey}</label>\n                            <input type=\"text\" id=\"${key}\" value=\"${this.data[key]}\">\n                        </div>\n                    `;\n                }\n            }\n        }\n        return editFieldsHtml;\n    }\n    saveChanges() {\n        const newData = {};\n        \n        for (const key in this.data) {\n            const inputField = document.getElementById(key);\n            if (inputField && inputField.value !== undefined) {\n                newData[key] = inputField.value;\n            }\n        }\n\n        for (const key in newData) {\n            if (this.data.hasOwnProperty(key)) {\n                this.data[key] = newData[key];\n            }\n        }\n        \n        this.modal.remove();\n        console.log(this.data);\n        this.updateAdditionalInfo();\n        this.additionalInfoContainer.classList.remove(\"hidden\");\n        this.btnContainer.classList.remove(\"hidden\");\n    }\n\n    updateAdditionalInfo() {\n        const newAdditionalInfoHtml = this.renderAdditionalInfo();\n        this.additionalInfoContainer.innerHTML = newAdditionalInfoHtml;\n    }\n\n\n//---------------------------------------------------------------------------\n    addToVisitsList() {\n        this.visitsListSection.appendChild(this.card);\n    }\n}\n//-------login------------------------------------------------------------\nclass Login {\n    constructor() {\n        this.modal = this.createLoginModal();\n        document.body.append(this.modal);\n        this.loginButton = document.getElementById('header-userActions-loginButton');\n        this.loginButton.classList.add(\"hidden\");\n        this.loginEventButton = this.modal.querySelector(\"#loginBtn\");\n        this.errorElement = this.modal.querySelector(\"#error-message\"); // Додали елемент для відображення повідомлення про помилку\n        this.loginEventButton.addEventListener('click', () => this.loginEvent());\n    }\n\n    createLoginModal() {\n        const loginModal = document.createElement('div');\n        loginModal.classList.add('loginModal');\n        loginModal.innerHTML = `\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" />\n            <br />\n            <label for=\"password\">Пароль:</label>\n            <input type=\"password\" id=\"password\" />\n            <br />\n            <button id=\"loginBtn\">Увійти</button>\n            <p id=\"error-message\" class=\"error-message\"></p> <!-- Додали елемент для відображення повідомлення про помилку -->\n        `;\n        return loginModal;\n    }\n\n    loginEvent() {\n        const emailInput = this.modal.querySelector(\"#email\");\n        const passwordInput = this.modal.querySelector(\"#password\");\n        const email = emailInput.value;\n        const password = passwordInput.value;\n\n        fetch(\"https://ajax.test-danit.com/api/v2/cards/login\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ email, password })\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Неправильні дані');\n            }\n            return response.text();\n        })\n        .then(token => {\n            userToken = token;\n            console.log(userToken);\n\n            createCardButton.classList.add('active');\n\n            this.modal.remove();\n        })\n        .catch(error => {\n            console.error('Error:', error);\n            this.clearFields();\n            this.showError('Неправильні дані'); // Вивести повідомлення про помилку\n        });\n    }\n\n    clearFields() {\n        const emailInput = this.modal.querySelector(\"#email\");\n        const passwordInput = this.modal.querySelector(\"#password\");\n        emailInput.value = '';\n        passwordInput.value = '';\n        this.hideError(); \n    }\n    showError(message) {\n        this.errorElement.textContent = message;\n        this.errorElement.classList.add(\"visible\");\n    }\n    hideError() {\n        this.errorElement.textContent = '';\n        this.errorElement.classList.remove(\"visible\");\n    }\n    displayCards(){\n\n    }\n}\n\n//-----------------------------------------------------------------------\n\n// const testObj ={ \n//             selectedDoctor: 'Кардіолог',\n//             purpose: 'Регулярний огляд',\n//             description: 'Аналіз крові та артеріального тиску',\n//             urgency: 'Пріоритетна',\n//             fullName: 'Петренко Іван Петрович',\n//             pressure: '120/80',\n//             bmi: 24.5,\n//             cardiovascularDiseases: 'Немає',\n//             age: 35,\n//             lastVisitDate: '2023-01-09'\n//         }\nconst translations = {\n            doctorName: 'Лікар',\n            purpose: 'Мета візиту',\n            description: 'Короткий опис візиту',\n            urgency: 'Терміновість',\n            fullName: 'ПІБ',\n            pressure: 'Звичайний тиск',\n            bmi: 'Індекс маси тіла',\n            cardiovascularDiseases: 'Перенесені захворювання серцево-судинної системи',\n            age: 'Вік',\n            lastVisitDate: 'Дата останнього відвідування'\n};\n\n        // const cardInstance = new Card(testObj);\n        // cardInstance.addToVisitsList();\n\n        // const cardInstance2 = new Card(testObj);\n        // cardInstance2.addToVisitsList()\n\n        // const cardInstance3 = new Card(testObj);\n        // cardInstance3.addToVisitsList()"]}