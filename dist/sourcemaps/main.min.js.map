{"version":3,"sources":["01_main.js"],"names":["visitContainer","document","querySelector","loginButton","getElementById","addEventListener","Login","userToken","createCardButton","CreateVisitModal","[object Object]","classList","toggle","this","modal","createElement","add","innerHTML","body","appendChild","selectElement","fieldsContainer","handleDoctorChange","bind","selectedDoctor","value","updateAdditionalFields","createInputField","createSelectField","createBtn","innerText","createVisit","closeBtn","closeVisitModal","remove","inputs","querySelectorAll","visitData","options","selectedIndex","text","forEach","input","id","type","visit","console","log","pushToServer","fetch","method","headers","Content-Type","Authorization","JSON","stringify","then","response","ok","Error","status","json","Card","addToVisitsList","catch","error","fieldName","label","inputField","selectField","selectOptions","map","option","join","toLowerCase","data","isEditing","card","createCard","visitsListSection","additionalInfoContainer","btnContainer","cardInstance","cardElement","fullName","renderAdditionalInfo","handleButtonClick","additionalInfoHtml","key","translations","event","target","contains","redactCard","deleteCard","showCard","cardId","showMoreBtn","currentEditingCard","renderEditFields","append","saveChanges","editFieldsHtml","translatedKey","newData","undefined","hasOwnProperty","updateAdditionalInfo","newAdditionalInfoHtml","createLoginModal","loginEventButton","errorElement","loginEvent","loginModal","emailInput","passwordInput","email","password","token","displayCards","clearFields","showError","hideError","message","textContent","cardData","doctorName","purpose","description","urgency","pressure","bmi","cardiovascularDiseases","age","lastVisitDate"],"mappings":"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","file":"../js/main.min.js","sourcesContent":["const visitContainer = document.querySelector(\".visits-list\");\r\nconst loginButton = document.getElementById('header-userActions-loginButton');\r\nloginButton.addEventListener(\"click\", () => new Login());\r\nlet userToken = \"\";\r\n\r\n\r\nconst createCardButton = document.getElementById('header-userActions-createCard');\r\ncreateCardButton.addEventListener('click', () => {\r\n    let createVisit = new CreateVisitModal();\r\n});\r\n\r\n\r\nclass CreateVisitModal {\r\n    constructor() {\r\n        createCardButton.classList.toggle(\"hidden\");\r\n\r\n        this.modal = document.createElement('div');\r\n        this.modal.classList.add('creadeVisitModal');\r\n        this.modal.innerHTML = `\r\n        <div class=\"modal-content\">\r\n            <label for=\"doctorSelect\">Оберіть лікаря:</label>\r\n            <select id=\"doctorSelect\">\r\n                <option value=\"\" disabled selected hidden>Оберіть лікаря</option>\r\n                <option value=\"cardiologist\">Кардіолог</option>\r\n                <option value=\"dentist\">Стоматолог</option>\r\n                <option value=\"therapist\">Терапевт</option>\r\n            </select>\r\n            <div id=\"fieldsContainer\"></div>\r\n        </div>\r\n        `;\r\n\r\n        document.body.appendChild(this.modal);\r\n\r\n        this.selectElement = document.getElementById('doctorSelect');\r\n        this.fieldsContainer = document.getElementById('fieldsContainer');\r\n        this.selectElement.addEventListener('change', this.handleDoctorChange.bind(this));\r\n    }\r\n    handleDoctorChange() {\r\n        const selectedDoctor = this.selectElement.value;\r\n        this.updateAdditionalFields(selectedDoctor);\r\n    }\r\n    updateAdditionalFields(selectedDoctor) {\r\n\r\n        this.fieldsContainer.innerHTML = '';\r\n\r\n        this.createInputField(\"purpose\",\"Мета візиту\")\r\n        this.createInputField(\"description\",\"Короткий опис візиту\")\r\n        this.createSelectField(\"urgency\", \"Терміновість\", [\"Звичайна\", \"Пріоритетна\", \"Невідкладна\"],\"оберіть терміновість\");\r\n        this.createInputField(\"fullName\",\"ПІБ\")\r\n\r\n        if (selectedDoctor === 'cardiologist') {\r\n            this.createInputField('pressure', 'Звичайний тиск:');\r\n            this.createInputField('bmi', 'Індекс маси тіла:');\r\n            this.createInputField('cardiovascularDiseases', 'Перенесені захворювання серцево-судинної системи:');\r\n            this.createInputField('age', 'Вік:');\r\n        } else if (selectedDoctor === 'dentist') {\r\n            this.createInputField('lastVisitDate', 'Дата останнього відвідування:');\r\n        } else if (selectedDoctor === 'therapist') {\r\n            this.createInputField('age', 'Вік:');\r\n        }\r\n\r\n        const createBtn = document.createElement('button');\r\n        createBtn.innerText = 'Створити';\r\n        createBtn.addEventListener('click', () => this.createVisit());\r\n        this.fieldsContainer.appendChild(createBtn);\r\n\r\n        const closeBtn = document.createElement('button');\r\n        closeBtn.innerText = 'Закрити';\r\n        closeBtn.addEventListener('click', () => this.closeVisitModal());\r\n        this.fieldsContainer.appendChild(closeBtn);\r\n\r\n    }\r\n\r\n    closeVisitModal(){\r\n        this.modal.remove();\r\n        createCardButton.classList.toggle(\"hidden\");\r\n    }\r\n    createVisit(){\r\n        const inputs = this.fieldsContainer.querySelectorAll('.modalInput');\r\n        const visitData = {};\r\n\r\n        visitData['selectedDoctor'] = visitData['selectedDoctor'] = this.selectElement.options[this.selectElement.selectedIndex].text;;\r\n\r\n        inputs.forEach(input => {\r\n            const id = input.id;\r\n            const value = input.type === 'select-one' ? input.options[input.selectedIndex].value : input.value;\r\n            visitData[id] = value;\r\n        });\r\n\r\n        this.visit = visitData;\r\n        console.log(this.visit);\r\n\r\n        this.closeVisitModal();\r\n\r\n        this.pushToServer(this.visit);\r\n    }\r\n\r\n    pushToServer(visit) {\r\n        fetch(\"https://ajax.test-danit.com/api/v2/cards\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${userToken}`\r\n            },\r\n            body: JSON.stringify(visit) \r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(response => {\r\n            console.log(response)\r\n            const card = new Card(response);\r\n        card.addToVisitsList();\r\n        })\r\n        .catch(error => console.error('Помилка:', error));\r\n    }\r\n\r\n    createInputField(fieldName, label) {\r\n        const inputField = document.createElement('div');\r\n        inputField.innerHTML = `\r\n            <label for=\"${fieldName}\">${label}</label>\r\n            <input type=\"text\" id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\r\n        `;\r\n        this.fieldsContainer.appendChild(inputField);\r\n    }\r\n    createSelectField(fieldName, label, options) {\r\n        const selectField = document.createElement('div');\r\n        const selectOptions = options.map(option => `<option value=\"${option}\">${option}</option>`).join('');\r\n        selectField.innerHTML = `\r\n            <label for=\"${fieldName}\">${label}</label>\r\n            <select id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\r\n                <option value=\"\" disabled selected hidden>Оберіть ${label.toLowerCase()}</option>\r\n                ${selectOptions}\r\n            </select>\r\n        `;\r\n        this.fieldsContainer.appendChild(selectField);\r\n    }\r\n}\r\n\r\n//----------------------------------------------------------------------------------------\r\nclass Card {\r\n    static currentEditingCard = null;\r\n\r\n    constructor(visitData) {\r\n        this.data = visitData;\r\n        this.isEditing = false; //перевірка чи відкрита форма редагування\r\n        this.card = this.createCard();\r\n        this.visitsListSection = document.querySelector('.visits-list');\r\n        this.additionalInfoContainer = this.card.querySelector('.additionalInfoContainer');\r\n        this.btnContainer = this.card.querySelector(\".buttonsContainer\")\r\n        this.modal \r\n\r\n        this.card.cardInstance = this;\r\n    }\r\n\r\n    createCard() {\r\n        const cardElement = document.createElement(\"div\");\r\n        cardElement.classList.add(\"visitCard\");\r\n        cardElement.innerHTML = `\r\n            <div class=\"visibleInfo\">\r\n                <p>ПІБ: ${this.data.fullName}</p>\r\n                <p>Лікар: ${this.data.selectedDoctor}</p>\r\n            </div>\r\n            <div class=\"additionalInfoContainer\">\r\n                ${this.renderAdditionalInfo()}\r\n            </div>\r\n            <div class=\"buttonsContainer\">\r\n                <button class=\"showMoreBtn\">Показати більше</button>\r\n                <button class=\"editBtn\">Редагувати</button>\r\n                \r\n            </div>\r\n            <button class=\"deleteIcon\">❌</button>\r\n        `;\r\n        cardElement.addEventListener('click', this.handleButtonClick.bind(this));\r\n        return cardElement;\r\n    }\r\n\r\n    renderAdditionalInfo() {\r\n        let additionalInfoHtml = '';\r\n            for (const key in this.data) {\r\n                if (key !== 'selectedDoctor' && key !== 'fullName' && key !== 'id') {\r\n                    const translatedKey = translations[key] || key;\r\n                    additionalInfoHtml += `<p>${translatedKey}: ${this.data[key]}</p>`;\r\n                }\r\n            }\r\n        return additionalInfoHtml;\r\n    }\r\n//------------------------кнопки--------------------------------------------\r\n    handleButtonClick(event) {\r\n        const target = event.target;\r\n        if (target.classList.contains('editBtn')) {\r\n            this.redactCard();\r\n        } else if (target.classList.contains('deleteIcon')) {\r\n            this.deleteCard();\r\n        } else if (target.classList.contains(\"showMoreBtn\")){\r\n            this.showCard();\r\n        }\r\n    }\r\n\r\n    deleteCard() {\r\n        const cardId = this.data.id;\r\n\r\n        if (cardId) {\r\n            fetch(`https://ajax.test-danit.com/api/v2/cards/${cardId}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Authorization': `Bearer ${userToken}`\r\n                },\r\n            })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(`Failed to delete card with ID ${cardId}`);\r\n                }\r\n                this.card.remove();\r\n            })\r\n            .catch(error => console.error(error));\r\n        }\r\n    }\r\n    showCard(){\r\n        const showMoreBtn = this.card.querySelector('.showMoreBtn')\r\n        this.additionalInfoContainer.classList.toggle('active');\r\n        showMoreBtn.innerText = this.additionalInfoContainer.classList.contains(\"active\") ? \"Згорнути\" : \"Показати більше\";\r\n    }\r\n    redactCard() {\r\n        if (!Card.currentEditingCard) { // перевіряємо, чи не редагується вже інша карта\r\n            Card.currentEditingCard = this; // зберігаємо посилання на поточну редаговану карту\r\n            this.additionalInfoContainer.classList.add(\"hidden\");\r\n            this.btnContainer.classList.add(\"hidden\");\r\n\r\n            this.modal = document.createElement('div');\r\n            this.modal.classList.add('modal');\r\n            this.modal.innerHTML = `\r\n                <div class=\"modal-content\">\r\n                    <h2>Редагування даних</h2>\r\n                    ${this.renderEditFields()}\r\n                    <button class=\"saveBtn\">Зберегти</button>\r\n                </div>\r\n            `;\r\n            this.card.append(this.modal)\r\n\r\n            const saveBtn = this.modal.querySelector('.saveBtn');\r\n            saveBtn.addEventListener('click', () => this.saveChanges());\r\n        }\r\n    }\r\n    renderEditFields() {\r\n        let editFieldsHtml = '';\r\n        for (const key in this.data) {\r\n            if (key !== 'selectedDoctor' && key !== 'fullName') {\r\n                const translatedKey = translations[key] || key;\r\n                if (key === 'urgency') {\r\n                    editFieldsHtml += `\r\n                        <div class=\"edit-field\">\r\n                            <label for=\"${key}\">${translatedKey}</label>\r\n                            <select id=\"${key}\">\r\n                                <option value=\"Звичайна\" ${this.data[key] === 'Звичайна' ? 'selected' : ''}>Звичайна</option>\r\n                                <option value=\"Пріоритетна\" ${this.data[key] === 'Пріоритетна' ? 'selected' : ''}>Пріоритетна</option>\r\n                                <option value=\"Невідкладна\" ${this.data[key] === 'Невідкладна' ? 'selected' : ''}>Невідкладна</option>\r\n                            </select>\r\n                        </div>\r\n                    `;\r\n                } else {\r\n                    editFieldsHtml += `\r\n                        <div class=\"edit-field\">\r\n                            <label for=\"${key}\">${translatedKey}</label>\r\n                            <input type=\"text\" id=\"${key}\" value=\"${this.data[key]}\">\r\n                        </div>\r\n                    `;\r\n                }\r\n            }\r\n        }\r\n        return editFieldsHtml;\r\n    }\r\n    saveChanges() {\r\n        const newData = {};\r\n        \r\n        for (const key in this.data) {\r\n            const inputField = document.getElementById(key);\r\n            if (inputField && inputField.value !== undefined) {\r\n                newData[key] = inputField.value;\r\n            }\r\n        }\r\n\r\n        for (const key in newData) {\r\n            if (this.data.hasOwnProperty(key)) {\r\n                this.data[key] = newData[key];\r\n            }\r\n        }\r\n        \r\n        this.modal.remove();\r\n        console.log(this.data);\r\n        this.updateAdditionalInfo();\r\n        this.additionalInfoContainer.classList.remove(\"hidden\");\r\n        this.btnContainer.classList.remove(\"hidden\");\r\n        Card.currentEditingCard = null; // позначаємо, що форма редагування закрита\r\n    }\r\n\r\n    updateAdditionalInfo() {\r\n        const newAdditionalInfoHtml = this.renderAdditionalInfo();\r\n        this.additionalInfoContainer.innerHTML = newAdditionalInfoHtml;\r\n    }\r\n\r\n\r\n//---------------------------------------------------------------------------\r\n    addToVisitsList() {\r\n        this.visitsListSection.appendChild(this.card);\r\n    }\r\n}\r\n//-------login------------------------------------------------------------\r\nclass Login {\r\n    constructor() {\r\n        this.modal = this.createLoginModal();\r\n        document.body.append(this.modal);\r\n        this.loginButton = document.getElementById('header-userActions-loginButton');\r\n        this.loginButton.classList.add(\"hidden\");\r\n        this.loginEventButton = this.modal.querySelector(\"#loginBtn\");\r\n        this.errorElement = this.modal.querySelector(\"#error-message\"); // Додали елемент для відображення повідомлення про помилку\r\n        this.loginEventButton.addEventListener('click', () => this.loginEvent());\r\n    }\r\n\r\n    createLoginModal() {\r\n        const loginModal = document.createElement('div');\r\n        loginModal.classList.add('loginModal');\r\n        loginModal.innerHTML = `\r\n            <label for=\"email\">Email:</label>\r\n            <input type=\"email\" id=\"email\" />\r\n            <br />\r\n            <label for=\"password\">Пароль:</label>\r\n            <input type=\"password\" id=\"password\" />\r\n            <br />\r\n            <button id=\"loginBtn\">Увійти</button>\r\n            <p id=\"error-message\" class=\"error-message\"></p> <!-- Додали елемент для відображення повідомлення про помилку -->\r\n        `;\r\n        return loginModal;\r\n    }\r\n\r\n    loginEvent() {\r\n        const emailInput = this.modal.querySelector(\"#email\");\r\n        const passwordInput = this.modal.querySelector(\"#password\");\r\n        const email = emailInput.value;\r\n        const password = passwordInput.value;\r\n\r\n        fetch(\"https://ajax.test-danit.com/api/v2/cards/login\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ email, password })\r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error('Неправильні дані');\r\n            }\r\n            return response.text();\r\n        })\r\n        .then(token => {\r\n            userToken = token;\r\n            console.log(userToken);\r\n\r\n            createCardButton.classList.add('active');\r\n            this.displayCards();\r\n\r\n            this.modal.remove();\r\n        })\r\n        .catch(error => {\r\n            console.error('Error:', error);\r\n            this.clearFields();\r\n            this.showError('Неправильні дані'); \r\n        });\r\n    }\r\n\r\n    clearFields() {\r\n        const emailInput = this.modal.querySelector(\"#email\");\r\n        const passwordInput = this.modal.querySelector(\"#password\");\r\n        emailInput.value = '';\r\n        passwordInput.value = '';\r\n        this.hideError(); \r\n    }\r\n    showError(message) {\r\n        this.errorElement.textContent = message;\r\n        this.errorElement.classList.add(\"visible\");\r\n    }\r\n    hideError() {\r\n        this.errorElement.textContent = '';\r\n        this.errorElement.classList.remove(\"visible\");\r\n    }\r\n    displayCards(){\r\n        fetch(\"https://ajax.test-danit.com/api/v2/cards\", {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': `Bearer ${userToken}`\r\n        }\r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            data.forEach(cardData => {\r\n                const card = new Card(cardData);\r\n                card.addToVisitsList();\r\n            });\r\n        })\r\n        .catch(error => console.error('Помилка:', error));\r\n            }\r\n        }\r\n\r\n//-----------------------------------------------------------------------\r\n\r\n// const testObj ={ \r\n//             selectedDoctor: 'Кардіолог',\r\n//             purpose: 'Регулярний огляд',\r\n//             description: 'Аналіз крові та артеріального тиску',\r\n//             urgency: 'Пріоритетна',\r\n//             fullName: 'Петренко Іван Петрович',\r\n//             pressure: '120/80',\r\n//             bmi: 24.5,\r\n//             cardiovascularDiseases: 'Немає',\r\n//             age: 35,\r\n//             lastVisitDate: '2023-01-09'\r\n//         }\r\nconst translations = {\r\n            doctorName: 'Лікар',\r\n            purpose: 'Мета візиту',\r\n            description: 'Короткий опис візиту',\r\n            urgency: 'Терміновість',\r\n            fullName: 'ПІБ',\r\n            pressure: 'Звичайний тиск',\r\n            bmi: 'Індекс маси тіла',\r\n            cardiovascularDiseases: 'Перенесені захворювання серцево-судинної системи',\r\n            age: 'Вік',\r\n            lastVisitDate: 'Дата останнього відвідування'\r\n};\r\n\r\n        // const cardInstance = new Card(testObj);\r\n        // cardInstance.addToVisitsList();\r\n\r\n        // const cardInstance2 = new Card(testObj);\r\n        // cardInstance2.addToVisitsList()\r\n\r\n        // const cardInstance3 = new Card(testObj);\r\n        // cardInstance3.addToVisitsList()"]}