{"version":3,"sources":["01_main.js"],"names":["visitContainer","document","querySelector","CreateVisitModal","[object Object]","this","modal","createElement","classList","add","innerHTML","body","appendChild","selectElement","getElementById","fieldsContainer","addEventListener","handleDoctorChange","bind","selectedDoctor","value","updateAdditionalFields","createInputField","createSelectField","createBtn","innerText","createVisit","closeBtn","closeVisitModal","remove","inputs","querySelectorAll","visitData","options","selectedIndex","text","forEach","input","id","type","visit","console","log","fieldName","label","inputField","selectField","selectOptions","map","option","join","toLowerCase","VisitCard","isExpanded","isEditing","createCardElement","render","cardElement","fullName","doctorName","toggleExpanded","toggleEditing","deleteCard","additionalInfoContainer","Object","keys","key","renderEditForm","updateVisitDataFromForm","DoctorVisit","purpose","description","urgency","bloodPressure","bmi","cardiovascularDiseases","age","lastVisitDate","doctorVisitObject","visitCard"],"mappings":"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","file":"../js/main.min.js","sourcesContent":["const visitContainer = document.querySelector(\".visits-list\");\r\n\r\nclass CreateVisitModal {\r\n    constructor() {\r\n        this.modal = document.createElement('div');\r\n        this.modal.classList.add('creadeVisitModal');\r\n        this.modal.innerHTML = `\r\n        <div class=\"modal-content\">\r\n            <label for=\"doctorSelect\">Оберіть лікаря:</label>\r\n            <select id=\"doctorSelect\">\r\n                <option value=\"\" disabled selected hidden>Оберіть лікаря</option>\r\n                <option value=\"cardiologist\">Кардіолог</option>\r\n                <option value=\"dentist\">Стоматолог</option>\r\n                <option value=\"therapist\">Терапевт</option>\r\n            </select>\r\n            <div id=\"fieldsContainer\"></div>\r\n        </div>\r\n        `;\r\n\r\n        document.body.appendChild(this.modal);\r\n\r\n        this.selectElement = document.getElementById('doctorSelect');\r\n        this.fieldsContainer = document.getElementById('fieldsContainer');\r\n        this.selectElement.addEventListener('change', this.handleDoctorChange.bind(this));\r\n    }\r\n    handleDoctorChange() {\r\n        const selectedDoctor = this.selectElement.value;\r\n        this.updateAdditionalFields(selectedDoctor);\r\n    }\r\n    updateAdditionalFields(selectedDoctor) {\r\n\r\n        this.fieldsContainer.innerHTML = '';\r\n\r\n        this.createInputField(\"purpose\",\"Мета візиту\")\r\n        this.createInputField(\"description\",\"Короткий опис візиту\")\r\n        this.createSelectField(\"urgency\", \"Терміновість\", [\"Звичайна\", \"Пріоритетна\", \"Невідкладна\"],\"оберіть терміновість\");\r\n        this.createInputField(\"fullName\",\"ПІБ\")\r\n\r\n        if (selectedDoctor === 'cardiologist') {\r\n            this.createInputField('pressure', 'Звичайний тиск:');\r\n            this.createInputField('bmi', 'Індекс маси тіла:');\r\n            this.createInputField('heartDiseases', 'Перенесені захворювання серцево-судинної системи:');\r\n            this.createInputField('age', 'Вік:');\r\n        } else if (selectedDoctor === 'dentist') {\r\n            this.createInputField('lastVisitDate', 'Дата останнього відвідування:');\r\n        } else if (selectedDoctor === 'therapist') {\r\n            this.createInputField('age', 'Вік:');\r\n        }\r\n\r\n        const createBtn = document.createElement('button');\r\n        createBtn.innerText = 'Створити';\r\n        createBtn.addEventListener('click', () => this.createVisit());\r\n        this.fieldsContainer.appendChild(createBtn);\r\n\r\n        const closeBtn = document.createElement('button');\r\n        closeBtn.innerText = 'Закрити';\r\n        closeBtn.addEventListener('click', () => this.closeVisitModal());\r\n        this.fieldsContainer.appendChild(closeBtn);\r\n\r\n    }\r\n\r\n    closeVisitModal(){\r\n        this.modal.remove();\r\n    }\r\n    createVisit(){\r\n        const inputs = this.fieldsContainer.querySelectorAll('.modalInput');\r\n        const visitData = {};\r\n\r\n        visitData['selectedDoctor'] = visitData['selectedDoctor'] = this.selectElement.options[this.selectElement.selectedIndex].text;;\r\n\r\n        inputs.forEach(input => {\r\n            const id = input.id;\r\n            const value = input.type === 'select-one' ? input.options[input.selectedIndex].value : input.value;\r\n            visitData[id] = value;\r\n        });\r\n\r\n        this.visit = visitData;\r\n        \r\n        console.log(createVisit.visit);\r\n        this.closeVisitModal();\r\n        //виклик функції для створення картки та відправлення на сервер------\r\n        \r\n        //-------------------------------------------------------------------\r\n    }\r\n\r\n    createInputField(fieldName, label) {\r\n        const inputField = document.createElement('div');\r\n        inputField.innerHTML = `\r\n            <label for=\"${fieldName}\">${label}</label>\r\n            <input type=\"text\" id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\r\n        `;\r\n        this.fieldsContainer.appendChild(inputField);\r\n    }\r\n    createSelectField(fieldName, label, options) {\r\n        const selectField = document.createElement('div');\r\n        const selectOptions = options.map(option => `<option value=\"${option}\">${option}</option>`).join('');\r\n        selectField.innerHTML = `\r\n            <label for=\"${fieldName}\">${label}</label>\r\n            <select id=\"${fieldName}\" name=\"${fieldName}\" class=\"modalInput\">\r\n                <option value=\"\" disabled selected hidden>Оберіть ${label.toLowerCase()}</option>\r\n                ${selectOptions}\r\n            </select>\r\n        `;\r\n        this.fieldsContainer.appendChild(selectField);\r\n    }\r\n}\r\n\r\n//тестова строчка допоки не буде кнопки для створення візиту--------\r\nconst createVisit = new CreateVisitModal();\r\n//------------------------------------------------------------------\r\n\r\n// картка візиту\r\nclass VisitCard {\r\n    constructor(visitData) {\r\n        this.visitData = visitData;\r\n        this.isExpanded = false;\r\n        this.isEditing = false;\r\n        this.createCardElement();\r\n        this.render();\r\n    }\r\n\r\n    createCardElement() {\r\n        this.cardElement = document.createElement('div');\r\n        this.cardElement.classList.add('visitCard');\r\n\r\n        // Додати інформацію, яка завжди видима\r\n        this.cardElement.innerHTML = `\r\n            <p>ПІБ: ${this.visitData.fullName}</p>\r\n            <p>Лікар: ${this.visitData.doctorName}</p>\r\n            <div class=\"additionalInfoContainer\"></div>\r\n            <button class=\"showMoreBtn\">Показати більше</button>\r\n            <button class=\"editBtn\">Редагувати</button>\r\n            <span class=\"deleteIcon\">❌</span>\r\n        `;\r\n\r\n        // Додати обробники подій\r\n        this.cardElement.querySelector('.showMoreBtn').addEventListener('click', () => this.toggleExpanded());\r\n        this.cardElement.querySelector('.editBtn').addEventListener('click', () => this.toggleEditing());\r\n        this.cardElement.querySelector('.deleteIcon').addEventListener('click', () => this.deleteCard());\r\n    }\r\n\r\n    render() {\r\n        // Оновити вміст картки залежно від стану\r\n        const additionalInfoContainer = this.cardElement.querySelector('.additionalInfoContainer');\r\n\r\n        if (this.isExpanded) {\r\n            // Додати решту інформації в додатковий контейнер\r\n            Object.keys(this.visitData).forEach(key => {\r\n                if (key !== 'fullName' && key !== 'doctorName') {\r\n                    additionalInfoContainer.innerHTML += `<p>${key}: ${this.visitData[key]}</p>`;\r\n                }\r\n            });\r\n        } else {\r\n            additionalInfoContainer.innerHTML = ''; // Очистити додатковий контейнер\r\n        }\r\n\r\n        // Оновити вміст картки\r\n        document.querySelector('.visits-list').appendChild(this.cardElement);\r\n\r\n        this.cardElement.querySelector('.showMoreBtn').innerText = this.isExpanded ? 'Показати менше' : 'Показати більше';\r\n    }\r\n\r\n    toggleExpanded() {\r\n        this.isExpanded = !this.isExpanded;\r\n        this.render();\r\n    }\r\n\r\n    toggleEditing() {\r\n        this.isEditing = !this.isEditing;\r\n\r\n        if (this.isEditing) {\r\n            // При переході до режиму редагування, ви можете вивести форму для редагування\r\n            // Наприклад, викликати метод для виведення форми редагування\r\n            this.renderEditForm();\r\n        } else {\r\n            // При виході з режиму редагування, оновіть вміст картки та збережіть редаговані дані\r\n            this.updateVisitDataFromForm();\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    renderEditForm() {\r\n        const additionalInfoContainer = this.cardElement.querySelector('.additionalInfoContainer');\r\n        additionalInfoContainer.innerHTML = `\r\n            <label for=\"editedFullName\">ПІБ:</label>\r\n            <input type=\"text\" id=\"editedFullName\" value=\"${this.visitData.fullName}\">\r\n            <label for=\"editedSelectedDoctor\">Лікар:</label>\r\n            <input type=\"text\" id=\"editedSelectedDoctor\" value=\"${this.visitData.doctorName}\">\r\n            <!-- Додайте інші поля редагування, використовуючи this.visitData -->\r\n        `;\r\n    }\r\n\r\n    updateVisitDataFromForm() {\r\n        // Оновіть дані візиту на основі даних у формі редагування\r\n        this.visitData.fullName = document.getElementById('editedFullName').value;\r\n        this.visitData.selectedDoctor = document.getElementById('editedSelectedDoctor').value;\r\n        // Оновіть інші поля, якщо необхідно\r\n        // ...\r\n    }\r\n\r\n    deleteCard() {\r\n        // Логіка видалення картки, наприклад, зображення контейнера\r\n        this.cardElement.remove();\r\n    }\r\n}\r\n\r\nfunction DoctorVisit(doctorName, purpose, description, urgency, fullName, bloodPressure, bmi, cardiovascularDiseases, age, lastVisitDate) {\r\n    this.doctorName = doctorName;\r\n    this.purpose = purpose;\r\n    this.description = description;\r\n    this.urgency = urgency;\r\n    this.fullName = fullName;\r\n    this.bloodPressure = bloodPressure;\r\n    this.bmi = bmi;\r\n    this.cardiovascularDiseases = cardiovascularDiseases;\r\n    this.age = age;\r\n    this.lastVisitDate = lastVisitDate;\r\n}\r\n\r\n// Приклад створення об'єкту\r\nconst doctorVisitObject = new DoctorVisit(\r\n    'Доктор Іванова',\r\n    'Регулярний огляд',\r\n    'Аналіз крові та артеріального тиску',\r\n    'Пріоритетна',\r\n    'Петренко Іван Петрович',\r\n    '120/80',\r\n    24.5,\r\n    'Немає',\r\n    35,\r\n    '2023-01-09'\r\n);\r\n\r\n// Приклад створення об'єкту VisitCard на основі doctorVisitObject\r\nconst visitCard = new VisitCard(doctorVisitObject);"]}